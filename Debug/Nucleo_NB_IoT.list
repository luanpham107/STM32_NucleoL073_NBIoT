
Nucleo_NB_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002590  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08002650  08002650  00012650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026bc  080026bc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080026bc  080026bc  000126bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080026c4  080026c4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026c4  080026c4  000126c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026c8  080026c8  000126c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080026cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  2000000c  080026d8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  080026d8  000200b0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005c95  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000120a  00000000  00000000  00025cc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000698  00000000  00000000  00026ed8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000620  00000000  00000000  00027570  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000134ce  00000000  00000000  00027b90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005d9f  00000000  00000000  0003b05e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00078b9e  00000000  00000000  00040dfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b999b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000016b4  00000000  00000000  000b9a18  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002638 	.word	0x08002638

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002638 	.word	0x08002638

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f830 	bl	80002b4 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	0415      	lsls	r5, r2, #16
 8000268:	0c2d      	lsrs	r5, r5, #16
 800026a:	002e      	movs	r6, r5
 800026c:	b580      	push	{r7, lr}
 800026e:	0407      	lsls	r7, r0, #16
 8000270:	0c14      	lsrs	r4, r2, #16
 8000272:	0c3f      	lsrs	r7, r7, #16
 8000274:	4699      	mov	r9, r3
 8000276:	0c03      	lsrs	r3, r0, #16
 8000278:	437e      	muls	r6, r7
 800027a:	435d      	muls	r5, r3
 800027c:	4367      	muls	r7, r4
 800027e:	4363      	muls	r3, r4
 8000280:	197f      	adds	r7, r7, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	19e4      	adds	r4, r4, r7
 8000286:	469c      	mov	ip, r3
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2380      	movs	r3, #128	; 0x80
 800028e:	025b      	lsls	r3, r3, #9
 8000290:	4698      	mov	r8, r3
 8000292:	44c4      	add	ip, r8
 8000294:	464b      	mov	r3, r9
 8000296:	4343      	muls	r3, r0
 8000298:	4351      	muls	r1, r2
 800029a:	0c25      	lsrs	r5, r4, #16
 800029c:	0436      	lsls	r6, r6, #16
 800029e:	4465      	add	r5, ip
 80002a0:	0c36      	lsrs	r6, r6, #16
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	19a4      	adds	r4, r4, r6
 80002a6:	195b      	adds	r3, r3, r5
 80002a8:	1859      	adds	r1, r3, r1
 80002aa:	0020      	movs	r0, r4
 80002ac:	bc0c      	pop	{r2, r3}
 80002ae:	4690      	mov	r8, r2
 80002b0:	4699      	mov	r9, r3
 80002b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b4 <__udivmoddi4>:
 80002b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b6:	464f      	mov	r7, r9
 80002b8:	4646      	mov	r6, r8
 80002ba:	46d6      	mov	lr, sl
 80002bc:	b5c0      	push	{r6, r7, lr}
 80002be:	0004      	movs	r4, r0
 80002c0:	b082      	sub	sp, #8
 80002c2:	000d      	movs	r5, r1
 80002c4:	4691      	mov	r9, r2
 80002c6:	4698      	mov	r8, r3
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d82f      	bhi.n	800032c <__udivmoddi4+0x78>
 80002cc:	d02c      	beq.n	8000328 <__udivmoddi4+0x74>
 80002ce:	4641      	mov	r1, r8
 80002d0:	4648      	mov	r0, r9
 80002d2:	f000 f8b1 	bl	8000438 <__clzdi2>
 80002d6:	0029      	movs	r1, r5
 80002d8:	0006      	movs	r6, r0
 80002da:	0020      	movs	r0, r4
 80002dc:	f000 f8ac 	bl	8000438 <__clzdi2>
 80002e0:	1a33      	subs	r3, r6, r0
 80002e2:	469c      	mov	ip, r3
 80002e4:	3b20      	subs	r3, #32
 80002e6:	469a      	mov	sl, r3
 80002e8:	d500      	bpl.n	80002ec <__udivmoddi4+0x38>
 80002ea:	e076      	b.n	80003da <__udivmoddi4+0x126>
 80002ec:	464b      	mov	r3, r9
 80002ee:	4652      	mov	r2, sl
 80002f0:	4093      	lsls	r3, r2
 80002f2:	001f      	movs	r7, r3
 80002f4:	464b      	mov	r3, r9
 80002f6:	4662      	mov	r2, ip
 80002f8:	4093      	lsls	r3, r2
 80002fa:	001e      	movs	r6, r3
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d828      	bhi.n	8000352 <__udivmoddi4+0x9e>
 8000300:	d025      	beq.n	800034e <__udivmoddi4+0x9a>
 8000302:	4653      	mov	r3, sl
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5a>
 800030c:	e07b      	b.n	8000406 <__udivmoddi4+0x152>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	4652      	mov	r2, sl
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4662      	mov	r2, ip
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e018      	b.n	800035a <__udivmoddi4+0xa6>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9d0      	bls.n	80002ce <__udivmoddi4+0x1a>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8a>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b002      	add	sp, #8
 8000344:	bc1c      	pop	{r2, r3, r4}
 8000346:	4690      	mov	r8, r2
 8000348:	4699      	mov	r9, r3
 800034a:	46a2      	mov	sl, r4
 800034c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800034e:	42a3      	cmp	r3, r4
 8000350:	d9d7      	bls.n	8000302 <__udivmoddi4+0x4e>
 8000352:	2200      	movs	r2, #0
 8000354:	2300      	movs	r3, #0
 8000356:	9200      	str	r2, [sp, #0]
 8000358:	9301      	str	r3, [sp, #4]
 800035a:	4663      	mov	r3, ip
 800035c:	2b00      	cmp	r3, #0
 800035e:	d0e9      	beq.n	8000334 <__udivmoddi4+0x80>
 8000360:	07fb      	lsls	r3, r7, #31
 8000362:	4698      	mov	r8, r3
 8000364:	4641      	mov	r1, r8
 8000366:	0872      	lsrs	r2, r6, #1
 8000368:	430a      	orrs	r2, r1
 800036a:	087b      	lsrs	r3, r7, #1
 800036c:	4666      	mov	r6, ip
 800036e:	e00e      	b.n	800038e <__udivmoddi4+0xda>
 8000370:	42ab      	cmp	r3, r5
 8000372:	d101      	bne.n	8000378 <__udivmoddi4+0xc4>
 8000374:	42a2      	cmp	r2, r4
 8000376:	d80c      	bhi.n	8000392 <__udivmoddi4+0xde>
 8000378:	1aa4      	subs	r4, r4, r2
 800037a:	419d      	sbcs	r5, r3
 800037c:	2001      	movs	r0, #1
 800037e:	1924      	adds	r4, r4, r4
 8000380:	416d      	adcs	r5, r5
 8000382:	2100      	movs	r1, #0
 8000384:	3e01      	subs	r6, #1
 8000386:	1824      	adds	r4, r4, r0
 8000388:	414d      	adcs	r5, r1
 800038a:	2e00      	cmp	r6, #0
 800038c:	d006      	beq.n	800039c <__udivmoddi4+0xe8>
 800038e:	42ab      	cmp	r3, r5
 8000390:	d9ee      	bls.n	8000370 <__udivmoddi4+0xbc>
 8000392:	3e01      	subs	r6, #1
 8000394:	1924      	adds	r4, r4, r4
 8000396:	416d      	adcs	r5, r5
 8000398:	2e00      	cmp	r6, #0
 800039a:	d1f8      	bne.n	800038e <__udivmoddi4+0xda>
 800039c:	9800      	ldr	r0, [sp, #0]
 800039e:	9901      	ldr	r1, [sp, #4]
 80003a0:	4653      	mov	r3, sl
 80003a2:	1900      	adds	r0, r0, r4
 80003a4:	4169      	adcs	r1, r5
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	db23      	blt.n	80003f2 <__udivmoddi4+0x13e>
 80003aa:	002b      	movs	r3, r5
 80003ac:	4652      	mov	r2, sl
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	002a      	movs	r2, r5
 80003b2:	4664      	mov	r4, ip
 80003b4:	40e2      	lsrs	r2, r4
 80003b6:	001c      	movs	r4, r3
 80003b8:	4653      	mov	r3, sl
 80003ba:	0015      	movs	r5, r2
 80003bc:	2b00      	cmp	r3, #0
 80003be:	db2d      	blt.n	800041c <__udivmoddi4+0x168>
 80003c0:	0026      	movs	r6, r4
 80003c2:	4657      	mov	r7, sl
 80003c4:	40be      	lsls	r6, r7
 80003c6:	0033      	movs	r3, r6
 80003c8:	0026      	movs	r6, r4
 80003ca:	4667      	mov	r7, ip
 80003cc:	40be      	lsls	r6, r7
 80003ce:	0032      	movs	r2, r6
 80003d0:	1a80      	subs	r0, r0, r2
 80003d2:	4199      	sbcs	r1, r3
 80003d4:	9000      	str	r0, [sp, #0]
 80003d6:	9101      	str	r1, [sp, #4]
 80003d8:	e7ac      	b.n	8000334 <__udivmoddi4+0x80>
 80003da:	4662      	mov	r2, ip
 80003dc:	2320      	movs	r3, #32
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	464a      	mov	r2, r9
 80003e2:	40da      	lsrs	r2, r3
 80003e4:	4661      	mov	r1, ip
 80003e6:	0013      	movs	r3, r2
 80003e8:	4642      	mov	r2, r8
 80003ea:	408a      	lsls	r2, r1
 80003ec:	0017      	movs	r7, r2
 80003ee:	431f      	orrs	r7, r3
 80003f0:	e780      	b.n	80002f4 <__udivmoddi4+0x40>
 80003f2:	4662      	mov	r2, ip
 80003f4:	2320      	movs	r3, #32
 80003f6:	1a9b      	subs	r3, r3, r2
 80003f8:	002a      	movs	r2, r5
 80003fa:	4666      	mov	r6, ip
 80003fc:	409a      	lsls	r2, r3
 80003fe:	0023      	movs	r3, r4
 8000400:	40f3      	lsrs	r3, r6
 8000402:	4313      	orrs	r3, r2
 8000404:	e7d4      	b.n	80003b0 <__udivmoddi4+0xfc>
 8000406:	4662      	mov	r2, ip
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e780      	b.n	800031e <__udivmoddi4+0x6a>
 800041c:	2320      	movs	r3, #32
 800041e:	4662      	mov	r2, ip
 8000420:	0026      	movs	r6, r4
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	40de      	lsrs	r6, r3
 8000426:	002f      	movs	r7, r5
 8000428:	46b0      	mov	r8, r6
 800042a:	4666      	mov	r6, ip
 800042c:	40b7      	lsls	r7, r6
 800042e:	4646      	mov	r6, r8
 8000430:	003b      	movs	r3, r7
 8000432:	4333      	orrs	r3, r6
 8000434:	e7c8      	b.n	80003c8 <__udivmoddi4+0x114>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__clzdi2>:
 8000438:	b510      	push	{r4, lr}
 800043a:	2900      	cmp	r1, #0
 800043c:	d103      	bne.n	8000446 <__clzdi2+0xe>
 800043e:	f000 f807 	bl	8000450 <__clzsi2>
 8000442:	3020      	adds	r0, #32
 8000444:	e002      	b.n	800044c <__clzdi2+0x14>
 8000446:	1c08      	adds	r0, r1, #0
 8000448:	f000 f802 	bl	8000450 <__clzsi2>
 800044c:	bd10      	pop	{r4, pc}
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__clzsi2>:
 8000450:	211c      	movs	r1, #28
 8000452:	2301      	movs	r3, #1
 8000454:	041b      	lsls	r3, r3, #16
 8000456:	4298      	cmp	r0, r3
 8000458:	d301      	bcc.n	800045e <__clzsi2+0xe>
 800045a:	0c00      	lsrs	r0, r0, #16
 800045c:	3910      	subs	r1, #16
 800045e:	0a1b      	lsrs	r3, r3, #8
 8000460:	4298      	cmp	r0, r3
 8000462:	d301      	bcc.n	8000468 <__clzsi2+0x18>
 8000464:	0a00      	lsrs	r0, r0, #8
 8000466:	3908      	subs	r1, #8
 8000468:	091b      	lsrs	r3, r3, #4
 800046a:	4298      	cmp	r0, r3
 800046c:	d301      	bcc.n	8000472 <__clzsi2+0x22>
 800046e:	0900      	lsrs	r0, r0, #4
 8000470:	3904      	subs	r1, #4
 8000472:	a202      	add	r2, pc, #8	; (adr r2, 800047c <__clzsi2+0x2c>)
 8000474:	5c10      	ldrb	r0, [r2, r0]
 8000476:	1840      	adds	r0, r0, r1
 8000478:	4770      	bx	lr
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	02020304 	.word	0x02020304
 8000480:	01010101 	.word	0x01010101
	...

0800048c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000490:	f000 f9b4 	bl	80007fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000494:	f000 f810 	bl	80004b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000498:	f000 f8aa 	bl	80005f0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800049c:	f000 f878 	bl	8000590 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80004a0:	23a0      	movs	r3, #160	; 0xa0
 80004a2:	05db      	lsls	r3, r3, #23
 80004a4:	2120      	movs	r1, #32
 80004a6:	0018      	movs	r0, r3
 80004a8:	f000 fc89 	bl	8000dbe <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80004ac:	23fa      	movs	r3, #250	; 0xfa
 80004ae:	009b      	lsls	r3, r3, #2
 80004b0:	0018      	movs	r0, r3
 80004b2:	f000 fa13 	bl	80008dc <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80004b6:	e7f3      	b.n	80004a0 <main+0x14>

080004b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004b8:	b590      	push	{r4, r7, lr}
 80004ba:	b09f      	sub	sp, #124	; 0x7c
 80004bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004be:	2440      	movs	r4, #64	; 0x40
 80004c0:	193b      	adds	r3, r7, r4
 80004c2:	0018      	movs	r0, r3
 80004c4:	2338      	movs	r3, #56	; 0x38
 80004c6:	001a      	movs	r2, r3
 80004c8:	2100      	movs	r1, #0
 80004ca:	f002 f8ad 	bl	8002628 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004ce:	232c      	movs	r3, #44	; 0x2c
 80004d0:	18fb      	adds	r3, r7, r3
 80004d2:	0018      	movs	r0, r3
 80004d4:	2314      	movs	r3, #20
 80004d6:	001a      	movs	r2, r3
 80004d8:	2100      	movs	r1, #0
 80004da:	f002 f8a5 	bl	8002628 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004de:	1d3b      	adds	r3, r7, #4
 80004e0:	0018      	movs	r0, r3
 80004e2:	2328      	movs	r3, #40	; 0x28
 80004e4:	001a      	movs	r2, r3
 80004e6:	2100      	movs	r1, #0
 80004e8:	f002 f89e 	bl	8002628 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004ec:	4b26      	ldr	r3, [pc, #152]	; (8000588 <SystemClock_Config+0xd0>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a26      	ldr	r2, [pc, #152]	; (800058c <SystemClock_Config+0xd4>)
 80004f2:	401a      	ands	r2, r3
 80004f4:	4b24      	ldr	r3, [pc, #144]	; (8000588 <SystemClock_Config+0xd0>)
 80004f6:	2180      	movs	r1, #128	; 0x80
 80004f8:	0109      	lsls	r1, r1, #4
 80004fa:	430a      	orrs	r2, r1
 80004fc:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80004fe:	0021      	movs	r1, r4
 8000500:	187b      	adds	r3, r7, r1
 8000502:	2210      	movs	r2, #16
 8000504:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000506:	187b      	adds	r3, r7, r1
 8000508:	2201      	movs	r2, #1
 800050a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800050c:	187b      	adds	r3, r7, r1
 800050e:	2200      	movs	r2, #0
 8000510:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000512:	187b      	adds	r3, r7, r1
 8000514:	22a0      	movs	r2, #160	; 0xa0
 8000516:	0212      	lsls	r2, r2, #8
 8000518:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800051a:	187b      	adds	r3, r7, r1
 800051c:	2200      	movs	r2, #0
 800051e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000520:	187b      	adds	r3, r7, r1
 8000522:	0018      	movs	r0, r3
 8000524:	f000 fc66 	bl	8000df4 <HAL_RCC_OscConfig>
 8000528:	1e03      	subs	r3, r0, #0
 800052a:	d001      	beq.n	8000530 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800052c:	f000 f8c4 	bl	80006b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000530:	212c      	movs	r1, #44	; 0x2c
 8000532:	187b      	adds	r3, r7, r1
 8000534:	220f      	movs	r2, #15
 8000536:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000538:	187b      	adds	r3, r7, r1
 800053a:	2200      	movs	r2, #0
 800053c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800053e:	187b      	adds	r3, r7, r1
 8000540:	2200      	movs	r2, #0
 8000542:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000544:	187b      	adds	r3, r7, r1
 8000546:	2200      	movs	r2, #0
 8000548:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800054a:	187b      	adds	r3, r7, r1
 800054c:	2200      	movs	r2, #0
 800054e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000550:	187b      	adds	r3, r7, r1
 8000552:	2100      	movs	r1, #0
 8000554:	0018      	movs	r0, r3
 8000556:	f001 f823 	bl	80015a0 <HAL_RCC_ClockConfig>
 800055a:	1e03      	subs	r3, r0, #0
 800055c:	d001      	beq.n	8000562 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800055e:	f000 f8ab 	bl	80006b8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000562:	1d3b      	adds	r3, r7, #4
 8000564:	2202      	movs	r2, #2
 8000566:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000568:	1d3b      	adds	r3, r7, #4
 800056a:	2200      	movs	r2, #0
 800056c:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800056e:	1d3b      	adds	r3, r7, #4
 8000570:	0018      	movs	r0, r3
 8000572:	f001 fa35 	bl	80019e0 <HAL_RCCEx_PeriphCLKConfig>
 8000576:	1e03      	subs	r3, r0, #0
 8000578:	d001      	beq.n	800057e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800057a:	f000 f89d 	bl	80006b8 <Error_Handler>
  }
}
 800057e:	46c0      	nop			; (mov r8, r8)
 8000580:	46bd      	mov	sp, r7
 8000582:	b01f      	add	sp, #124	; 0x7c
 8000584:	bd90      	pop	{r4, r7, pc}
 8000586:	46c0      	nop			; (mov r8, r8)
 8000588:	40007000 	.word	0x40007000
 800058c:	ffffe7ff 	.word	0xffffe7ff

08000590 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000594:	4b14      	ldr	r3, [pc, #80]	; (80005e8 <MX_USART2_UART_Init+0x58>)
 8000596:	4a15      	ldr	r2, [pc, #84]	; (80005ec <MX_USART2_UART_Init+0x5c>)
 8000598:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800059a:	4b13      	ldr	r3, [pc, #76]	; (80005e8 <MX_USART2_UART_Init+0x58>)
 800059c:	22e1      	movs	r2, #225	; 0xe1
 800059e:	0252      	lsls	r2, r2, #9
 80005a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005a2:	4b11      	ldr	r3, [pc, #68]	; (80005e8 <MX_USART2_UART_Init+0x58>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005a8:	4b0f      	ldr	r3, [pc, #60]	; (80005e8 <MX_USART2_UART_Init+0x58>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005ae:	4b0e      	ldr	r3, [pc, #56]	; (80005e8 <MX_USART2_UART_Init+0x58>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005b4:	4b0c      	ldr	r3, [pc, #48]	; (80005e8 <MX_USART2_UART_Init+0x58>)
 80005b6:	220c      	movs	r2, #12
 80005b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005ba:	4b0b      	ldr	r3, [pc, #44]	; (80005e8 <MX_USART2_UART_Init+0x58>)
 80005bc:	2200      	movs	r2, #0
 80005be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005c0:	4b09      	ldr	r3, [pc, #36]	; (80005e8 <MX_USART2_UART_Init+0x58>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005c6:	4b08      	ldr	r3, [pc, #32]	; (80005e8 <MX_USART2_UART_Init+0x58>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005cc:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <MX_USART2_UART_Init+0x58>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005d2:	4b05      	ldr	r3, [pc, #20]	; (80005e8 <MX_USART2_UART_Init+0x58>)
 80005d4:	0018      	movs	r0, r3
 80005d6:	f001 fb77 	bl	8001cc8 <HAL_UART_Init>
 80005da:	1e03      	subs	r3, r0, #0
 80005dc:	d001      	beq.n	80005e2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80005de:	f000 f86b 	bl	80006b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005e2:	46c0      	nop			; (mov r8, r8)
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	20000028 	.word	0x20000028
 80005ec:	40004400 	.word	0x40004400

080005f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005f0:	b590      	push	{r4, r7, lr}
 80005f2:	b089      	sub	sp, #36	; 0x24
 80005f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f6:	240c      	movs	r4, #12
 80005f8:	193b      	adds	r3, r7, r4
 80005fa:	0018      	movs	r0, r3
 80005fc:	2314      	movs	r3, #20
 80005fe:	001a      	movs	r2, r3
 8000600:	2100      	movs	r1, #0
 8000602:	f002 f811 	bl	8002628 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000606:	4b29      	ldr	r3, [pc, #164]	; (80006ac <MX_GPIO_Init+0xbc>)
 8000608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800060a:	4b28      	ldr	r3, [pc, #160]	; (80006ac <MX_GPIO_Init+0xbc>)
 800060c:	2104      	movs	r1, #4
 800060e:	430a      	orrs	r2, r1
 8000610:	62da      	str	r2, [r3, #44]	; 0x2c
 8000612:	4b26      	ldr	r3, [pc, #152]	; (80006ac <MX_GPIO_Init+0xbc>)
 8000614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000616:	2204      	movs	r2, #4
 8000618:	4013      	ands	r3, r2
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800061e:	4b23      	ldr	r3, [pc, #140]	; (80006ac <MX_GPIO_Init+0xbc>)
 8000620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000622:	4b22      	ldr	r3, [pc, #136]	; (80006ac <MX_GPIO_Init+0xbc>)
 8000624:	2180      	movs	r1, #128	; 0x80
 8000626:	430a      	orrs	r2, r1
 8000628:	62da      	str	r2, [r3, #44]	; 0x2c
 800062a:	4b20      	ldr	r3, [pc, #128]	; (80006ac <MX_GPIO_Init+0xbc>)
 800062c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800062e:	2280      	movs	r2, #128	; 0x80
 8000630:	4013      	ands	r3, r2
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000636:	4b1d      	ldr	r3, [pc, #116]	; (80006ac <MX_GPIO_Init+0xbc>)
 8000638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800063a:	4b1c      	ldr	r3, [pc, #112]	; (80006ac <MX_GPIO_Init+0xbc>)
 800063c:	2101      	movs	r1, #1
 800063e:	430a      	orrs	r2, r1
 8000640:	62da      	str	r2, [r3, #44]	; 0x2c
 8000642:	4b1a      	ldr	r3, [pc, #104]	; (80006ac <MX_GPIO_Init+0xbc>)
 8000644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000646:	2201      	movs	r2, #1
 8000648:	4013      	ands	r3, r2
 800064a:	603b      	str	r3, [r7, #0]
 800064c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800064e:	23a0      	movs	r3, #160	; 0xa0
 8000650:	05db      	lsls	r3, r3, #23
 8000652:	2200      	movs	r2, #0
 8000654:	2120      	movs	r1, #32
 8000656:	0018      	movs	r0, r3
 8000658:	f000 fb94 	bl	8000d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800065c:	193b      	adds	r3, r7, r4
 800065e:	2280      	movs	r2, #128	; 0x80
 8000660:	0192      	lsls	r2, r2, #6
 8000662:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000664:	193b      	adds	r3, r7, r4
 8000666:	4a12      	ldr	r2, [pc, #72]	; (80006b0 <MX_GPIO_Init+0xc0>)
 8000668:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066a:	193b      	adds	r3, r7, r4
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000670:	193b      	adds	r3, r7, r4
 8000672:	4a10      	ldr	r2, [pc, #64]	; (80006b4 <MX_GPIO_Init+0xc4>)
 8000674:	0019      	movs	r1, r3
 8000676:	0010      	movs	r0, r2
 8000678:	f000 fa06 	bl	8000a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800067c:	0021      	movs	r1, r4
 800067e:	187b      	adds	r3, r7, r1
 8000680:	2220      	movs	r2, #32
 8000682:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000684:	187b      	adds	r3, r7, r1
 8000686:	2201      	movs	r2, #1
 8000688:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068a:	187b      	adds	r3, r7, r1
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000690:	187b      	adds	r3, r7, r1
 8000692:	2200      	movs	r2, #0
 8000694:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000696:	187a      	adds	r2, r7, r1
 8000698:	23a0      	movs	r3, #160	; 0xa0
 800069a:	05db      	lsls	r3, r3, #23
 800069c:	0011      	movs	r1, r2
 800069e:	0018      	movs	r0, r3
 80006a0:	f000 f9f2 	bl	8000a88 <HAL_GPIO_Init>

}
 80006a4:	46c0      	nop			; (mov r8, r8)
 80006a6:	46bd      	mov	sp, r7
 80006a8:	b009      	add	sp, #36	; 0x24
 80006aa:	bd90      	pop	{r4, r7, pc}
 80006ac:	40021000 	.word	0x40021000
 80006b0:	10210000 	.word	0x10210000
 80006b4:	50000800 	.word	0x50000800

080006b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006bc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006be:	e7fe      	b.n	80006be <Error_Handler+0x6>

080006c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006c4:	4b07      	ldr	r3, [pc, #28]	; (80006e4 <HAL_MspInit+0x24>)
 80006c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006c8:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <HAL_MspInit+0x24>)
 80006ca:	2101      	movs	r1, #1
 80006cc:	430a      	orrs	r2, r1
 80006ce:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d0:	4b04      	ldr	r3, [pc, #16]	; (80006e4 <HAL_MspInit+0x24>)
 80006d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80006d4:	4b03      	ldr	r3, [pc, #12]	; (80006e4 <HAL_MspInit+0x24>)
 80006d6:	2180      	movs	r1, #128	; 0x80
 80006d8:	0549      	lsls	r1, r1, #21
 80006da:	430a      	orrs	r2, r1
 80006dc:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006de:	46c0      	nop			; (mov r8, r8)
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40021000 	.word	0x40021000

080006e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b088      	sub	sp, #32
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f0:	230c      	movs	r3, #12
 80006f2:	18fb      	adds	r3, r7, r3
 80006f4:	0018      	movs	r0, r3
 80006f6:	2314      	movs	r3, #20
 80006f8:	001a      	movs	r2, r3
 80006fa:	2100      	movs	r1, #0
 80006fc:	f001 ff94 	bl	8002628 <memset>
  if(huart->Instance==USART2)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a18      	ldr	r2, [pc, #96]	; (8000768 <HAL_UART_MspInit+0x80>)
 8000706:	4293      	cmp	r3, r2
 8000708:	d129      	bne.n	800075e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800070a:	4b18      	ldr	r3, [pc, #96]	; (800076c <HAL_UART_MspInit+0x84>)
 800070c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800070e:	4b17      	ldr	r3, [pc, #92]	; (800076c <HAL_UART_MspInit+0x84>)
 8000710:	2180      	movs	r1, #128	; 0x80
 8000712:	0289      	lsls	r1, r1, #10
 8000714:	430a      	orrs	r2, r1
 8000716:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000718:	4b14      	ldr	r3, [pc, #80]	; (800076c <HAL_UART_MspInit+0x84>)
 800071a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800071c:	4b13      	ldr	r3, [pc, #76]	; (800076c <HAL_UART_MspInit+0x84>)
 800071e:	2101      	movs	r1, #1
 8000720:	430a      	orrs	r2, r1
 8000722:	62da      	str	r2, [r3, #44]	; 0x2c
 8000724:	4b11      	ldr	r3, [pc, #68]	; (800076c <HAL_UART_MspInit+0x84>)
 8000726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000728:	2201      	movs	r2, #1
 800072a:	4013      	ands	r3, r2
 800072c:	60bb      	str	r3, [r7, #8]
 800072e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000730:	210c      	movs	r1, #12
 8000732:	187b      	adds	r3, r7, r1
 8000734:	220c      	movs	r2, #12
 8000736:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000738:	187b      	adds	r3, r7, r1
 800073a:	2202      	movs	r2, #2
 800073c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073e:	187b      	adds	r3, r7, r1
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000744:	187b      	adds	r3, r7, r1
 8000746:	2203      	movs	r2, #3
 8000748:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 800074a:	187b      	adds	r3, r7, r1
 800074c:	2204      	movs	r2, #4
 800074e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000750:	187a      	adds	r2, r7, r1
 8000752:	23a0      	movs	r3, #160	; 0xa0
 8000754:	05db      	lsls	r3, r3, #23
 8000756:	0011      	movs	r1, r2
 8000758:	0018      	movs	r0, r3
 800075a:	f000 f995 	bl	8000a88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800075e:	46c0      	nop			; (mov r8, r8)
 8000760:	46bd      	mov	sp, r7
 8000762:	b008      	add	sp, #32
 8000764:	bd80      	pop	{r7, pc}
 8000766:	46c0      	nop			; (mov r8, r8)
 8000768:	40004400 	.word	0x40004400
 800076c:	40021000 	.word	0x40021000

08000770 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000774:	e7fe      	b.n	8000774 <NMI_Handler+0x4>

08000776 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000776:	b580      	push	{r7, lr}
 8000778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800077a:	e7fe      	b.n	800077a <HardFault_Handler+0x4>

0800077c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000780:	46c0      	nop			; (mov r8, r8)
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}

08000786 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000786:	b580      	push	{r7, lr}
 8000788:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800078a:	46c0      	nop			; (mov r8, r8)
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}

08000790 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000794:	f000 f886 	bl	80008a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000798:	46c0      	nop			; (mov r8, r8)
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}

0800079e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800079e:	b580      	push	{r7, lr}
 80007a0:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007a2:	46c0      	nop			; (mov r8, r8)
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80007a8:	480d      	ldr	r0, [pc, #52]	; (80007e0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80007aa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007ac:	480d      	ldr	r0, [pc, #52]	; (80007e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80007ae:	490e      	ldr	r1, [pc, #56]	; (80007e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007b0:	4a0e      	ldr	r2, [pc, #56]	; (80007ec <LoopForever+0xe>)
  movs r3, #0
 80007b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007b4:	e002      	b.n	80007bc <LoopCopyDataInit>

080007b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ba:	3304      	adds	r3, #4

080007bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007c0:	d3f9      	bcc.n	80007b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007c2:	4a0b      	ldr	r2, [pc, #44]	; (80007f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007c4:	4c0b      	ldr	r4, [pc, #44]	; (80007f4 <LoopForever+0x16>)
  movs r3, #0
 80007c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007c8:	e001      	b.n	80007ce <LoopFillZerobss>

080007ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007cc:	3204      	adds	r2, #4

080007ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007d0:	d3fb      	bcc.n	80007ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80007d2:	f7ff ffe4 	bl	800079e <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007d6:	f001 ff03 	bl	80025e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007da:	f7ff fe57 	bl	800048c <main>

080007de <LoopForever>:

LoopForever:
    b LoopForever
 80007de:	e7fe      	b.n	80007de <LoopForever>
   ldr   r0, =_estack
 80007e0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80007e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007e8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007ec:	080026cc 	.word	0x080026cc
  ldr r2, =_sbss
 80007f0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007f4:	200000b0 	.word	0x200000b0

080007f8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007f8:	e7fe      	b.n	80007f8 <ADC1_COMP_IRQHandler>
	...

080007fc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000802:	1dfb      	adds	r3, r7, #7
 8000804:	2200      	movs	r2, #0
 8000806:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000808:	4b0b      	ldr	r3, [pc, #44]	; (8000838 <HAL_Init+0x3c>)
 800080a:	681a      	ldr	r2, [r3, #0]
 800080c:	4b0a      	ldr	r3, [pc, #40]	; (8000838 <HAL_Init+0x3c>)
 800080e:	2140      	movs	r1, #64	; 0x40
 8000810:	430a      	orrs	r2, r1
 8000812:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000814:	2000      	movs	r0, #0
 8000816:	f000 f811 	bl	800083c <HAL_InitTick>
 800081a:	1e03      	subs	r3, r0, #0
 800081c:	d003      	beq.n	8000826 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800081e:	1dfb      	adds	r3, r7, #7
 8000820:	2201      	movs	r2, #1
 8000822:	701a      	strb	r2, [r3, #0]
 8000824:	e001      	b.n	800082a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000826:	f7ff ff4b 	bl	80006c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800082a:	1dfb      	adds	r3, r7, #7
 800082c:	781b      	ldrb	r3, [r3, #0]
}
 800082e:	0018      	movs	r0, r3
 8000830:	46bd      	mov	sp, r7
 8000832:	b002      	add	sp, #8
 8000834:	bd80      	pop	{r7, pc}
 8000836:	46c0      	nop			; (mov r8, r8)
 8000838:	40022000 	.word	0x40022000

0800083c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800083c:	b590      	push	{r4, r7, lr}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000844:	4b14      	ldr	r3, [pc, #80]	; (8000898 <HAL_InitTick+0x5c>)
 8000846:	681c      	ldr	r4, [r3, #0]
 8000848:	4b14      	ldr	r3, [pc, #80]	; (800089c <HAL_InitTick+0x60>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	0019      	movs	r1, r3
 800084e:	23fa      	movs	r3, #250	; 0xfa
 8000850:	0098      	lsls	r0, r3, #2
 8000852:	f7ff fc59 	bl	8000108 <__udivsi3>
 8000856:	0003      	movs	r3, r0
 8000858:	0019      	movs	r1, r3
 800085a:	0020      	movs	r0, r4
 800085c:	f7ff fc54 	bl	8000108 <__udivsi3>
 8000860:	0003      	movs	r3, r0
 8000862:	0018      	movs	r0, r3
 8000864:	f000 f903 	bl	8000a6e <HAL_SYSTICK_Config>
 8000868:	1e03      	subs	r3, r0, #0
 800086a:	d001      	beq.n	8000870 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800086c:	2301      	movs	r3, #1
 800086e:	e00f      	b.n	8000890 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	2b03      	cmp	r3, #3
 8000874:	d80b      	bhi.n	800088e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000876:	6879      	ldr	r1, [r7, #4]
 8000878:	2301      	movs	r3, #1
 800087a:	425b      	negs	r3, r3
 800087c:	2200      	movs	r2, #0
 800087e:	0018      	movs	r0, r3
 8000880:	f000 f8e0 	bl	8000a44 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000884:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <HAL_InitTick+0x64>)
 8000886:	687a      	ldr	r2, [r7, #4]
 8000888:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800088a:	2300      	movs	r3, #0
 800088c:	e000      	b.n	8000890 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800088e:	2301      	movs	r3, #1
}
 8000890:	0018      	movs	r0, r3
 8000892:	46bd      	mov	sp, r7
 8000894:	b003      	add	sp, #12
 8000896:	bd90      	pop	{r4, r7, pc}
 8000898:	20000000 	.word	0x20000000
 800089c:	20000008 	.word	0x20000008
 80008a0:	20000004 	.word	0x20000004

080008a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008a8:	4b05      	ldr	r3, [pc, #20]	; (80008c0 <HAL_IncTick+0x1c>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	001a      	movs	r2, r3
 80008ae:	4b05      	ldr	r3, [pc, #20]	; (80008c4 <HAL_IncTick+0x20>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	18d2      	adds	r2, r2, r3
 80008b4:	4b03      	ldr	r3, [pc, #12]	; (80008c4 <HAL_IncTick+0x20>)
 80008b6:	601a      	str	r2, [r3, #0]
}
 80008b8:	46c0      	nop			; (mov r8, r8)
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	46c0      	nop			; (mov r8, r8)
 80008c0:	20000008 	.word	0x20000008
 80008c4:	200000ac 	.word	0x200000ac

080008c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  return uwTick;
 80008cc:	4b02      	ldr	r3, [pc, #8]	; (80008d8 <HAL_GetTick+0x10>)
 80008ce:	681b      	ldr	r3, [r3, #0]
}
 80008d0:	0018      	movs	r0, r3
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	46c0      	nop			; (mov r8, r8)
 80008d8:	200000ac 	.word	0x200000ac

080008dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008e4:	f7ff fff0 	bl	80008c8 <HAL_GetTick>
 80008e8:	0003      	movs	r3, r0
 80008ea:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	3301      	adds	r3, #1
 80008f4:	d005      	beq.n	8000902 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008f6:	4b09      	ldr	r3, [pc, #36]	; (800091c <HAL_Delay+0x40>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	001a      	movs	r2, r3
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	189b      	adds	r3, r3, r2
 8000900:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000902:	46c0      	nop			; (mov r8, r8)
 8000904:	f7ff ffe0 	bl	80008c8 <HAL_GetTick>
 8000908:	0002      	movs	r2, r0
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	1ad3      	subs	r3, r2, r3
 800090e:	68fa      	ldr	r2, [r7, #12]
 8000910:	429a      	cmp	r2, r3
 8000912:	d8f7      	bhi.n	8000904 <HAL_Delay+0x28>
  {
  }
}
 8000914:	46c0      	nop			; (mov r8, r8)
 8000916:	46bd      	mov	sp, r7
 8000918:	b004      	add	sp, #16
 800091a:	bd80      	pop	{r7, pc}
 800091c:	20000008 	.word	0x20000008

08000920 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000920:	b590      	push	{r4, r7, lr}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	0002      	movs	r2, r0
 8000928:	6039      	str	r1, [r7, #0]
 800092a:	1dfb      	adds	r3, r7, #7
 800092c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800092e:	1dfb      	adds	r3, r7, #7
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	2b7f      	cmp	r3, #127	; 0x7f
 8000934:	d828      	bhi.n	8000988 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000936:	4a2f      	ldr	r2, [pc, #188]	; (80009f4 <__NVIC_SetPriority+0xd4>)
 8000938:	1dfb      	adds	r3, r7, #7
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	b25b      	sxtb	r3, r3
 800093e:	089b      	lsrs	r3, r3, #2
 8000940:	33c0      	adds	r3, #192	; 0xc0
 8000942:	009b      	lsls	r3, r3, #2
 8000944:	589b      	ldr	r3, [r3, r2]
 8000946:	1dfa      	adds	r2, r7, #7
 8000948:	7812      	ldrb	r2, [r2, #0]
 800094a:	0011      	movs	r1, r2
 800094c:	2203      	movs	r2, #3
 800094e:	400a      	ands	r2, r1
 8000950:	00d2      	lsls	r2, r2, #3
 8000952:	21ff      	movs	r1, #255	; 0xff
 8000954:	4091      	lsls	r1, r2
 8000956:	000a      	movs	r2, r1
 8000958:	43d2      	mvns	r2, r2
 800095a:	401a      	ands	r2, r3
 800095c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	019b      	lsls	r3, r3, #6
 8000962:	22ff      	movs	r2, #255	; 0xff
 8000964:	401a      	ands	r2, r3
 8000966:	1dfb      	adds	r3, r7, #7
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	0018      	movs	r0, r3
 800096c:	2303      	movs	r3, #3
 800096e:	4003      	ands	r3, r0
 8000970:	00db      	lsls	r3, r3, #3
 8000972:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000974:	481f      	ldr	r0, [pc, #124]	; (80009f4 <__NVIC_SetPriority+0xd4>)
 8000976:	1dfb      	adds	r3, r7, #7
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	b25b      	sxtb	r3, r3
 800097c:	089b      	lsrs	r3, r3, #2
 800097e:	430a      	orrs	r2, r1
 8000980:	33c0      	adds	r3, #192	; 0xc0
 8000982:	009b      	lsls	r3, r3, #2
 8000984:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000986:	e031      	b.n	80009ec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000988:	4a1b      	ldr	r2, [pc, #108]	; (80009f8 <__NVIC_SetPriority+0xd8>)
 800098a:	1dfb      	adds	r3, r7, #7
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	0019      	movs	r1, r3
 8000990:	230f      	movs	r3, #15
 8000992:	400b      	ands	r3, r1
 8000994:	3b08      	subs	r3, #8
 8000996:	089b      	lsrs	r3, r3, #2
 8000998:	3306      	adds	r3, #6
 800099a:	009b      	lsls	r3, r3, #2
 800099c:	18d3      	adds	r3, r2, r3
 800099e:	3304      	adds	r3, #4
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	1dfa      	adds	r2, r7, #7
 80009a4:	7812      	ldrb	r2, [r2, #0]
 80009a6:	0011      	movs	r1, r2
 80009a8:	2203      	movs	r2, #3
 80009aa:	400a      	ands	r2, r1
 80009ac:	00d2      	lsls	r2, r2, #3
 80009ae:	21ff      	movs	r1, #255	; 0xff
 80009b0:	4091      	lsls	r1, r2
 80009b2:	000a      	movs	r2, r1
 80009b4:	43d2      	mvns	r2, r2
 80009b6:	401a      	ands	r2, r3
 80009b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	019b      	lsls	r3, r3, #6
 80009be:	22ff      	movs	r2, #255	; 0xff
 80009c0:	401a      	ands	r2, r3
 80009c2:	1dfb      	adds	r3, r7, #7
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	0018      	movs	r0, r3
 80009c8:	2303      	movs	r3, #3
 80009ca:	4003      	ands	r3, r0
 80009cc:	00db      	lsls	r3, r3, #3
 80009ce:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009d0:	4809      	ldr	r0, [pc, #36]	; (80009f8 <__NVIC_SetPriority+0xd8>)
 80009d2:	1dfb      	adds	r3, r7, #7
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	001c      	movs	r4, r3
 80009d8:	230f      	movs	r3, #15
 80009da:	4023      	ands	r3, r4
 80009dc:	3b08      	subs	r3, #8
 80009de:	089b      	lsrs	r3, r3, #2
 80009e0:	430a      	orrs	r2, r1
 80009e2:	3306      	adds	r3, #6
 80009e4:	009b      	lsls	r3, r3, #2
 80009e6:	18c3      	adds	r3, r0, r3
 80009e8:	3304      	adds	r3, #4
 80009ea:	601a      	str	r2, [r3, #0]
}
 80009ec:	46c0      	nop			; (mov r8, r8)
 80009ee:	46bd      	mov	sp, r7
 80009f0:	b003      	add	sp, #12
 80009f2:	bd90      	pop	{r4, r7, pc}
 80009f4:	e000e100 	.word	0xe000e100
 80009f8:	e000ed00 	.word	0xe000ed00

080009fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	3b01      	subs	r3, #1
 8000a08:	4a0c      	ldr	r2, [pc, #48]	; (8000a3c <SysTick_Config+0x40>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d901      	bls.n	8000a12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a0e:	2301      	movs	r3, #1
 8000a10:	e010      	b.n	8000a34 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a12:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <SysTick_Config+0x44>)
 8000a14:	687a      	ldr	r2, [r7, #4]
 8000a16:	3a01      	subs	r2, #1
 8000a18:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	425b      	negs	r3, r3
 8000a1e:	2103      	movs	r1, #3
 8000a20:	0018      	movs	r0, r3
 8000a22:	f7ff ff7d 	bl	8000920 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a26:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <SysTick_Config+0x44>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a2c:	4b04      	ldr	r3, [pc, #16]	; (8000a40 <SysTick_Config+0x44>)
 8000a2e:	2207      	movs	r2, #7
 8000a30:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a32:	2300      	movs	r3, #0
}
 8000a34:	0018      	movs	r0, r3
 8000a36:	46bd      	mov	sp, r7
 8000a38:	b002      	add	sp, #8
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	00ffffff 	.word	0x00ffffff
 8000a40:	e000e010 	.word	0xe000e010

08000a44 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	60b9      	str	r1, [r7, #8]
 8000a4c:	607a      	str	r2, [r7, #4]
 8000a4e:	210f      	movs	r1, #15
 8000a50:	187b      	adds	r3, r7, r1
 8000a52:	1c02      	adds	r2, r0, #0
 8000a54:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000a56:	68ba      	ldr	r2, [r7, #8]
 8000a58:	187b      	adds	r3, r7, r1
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	b25b      	sxtb	r3, r3
 8000a5e:	0011      	movs	r1, r2
 8000a60:	0018      	movs	r0, r3
 8000a62:	f7ff ff5d 	bl	8000920 <__NVIC_SetPriority>
}
 8000a66:	46c0      	nop			; (mov r8, r8)
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	b004      	add	sp, #16
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	b082      	sub	sp, #8
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	0018      	movs	r0, r3
 8000a7a:	f7ff ffbf 	bl	80009fc <SysTick_Config>
 8000a7e:	0003      	movs	r3, r0
}
 8000a80:	0018      	movs	r0, r3
 8000a82:	46bd      	mov	sp, r7
 8000a84:	b002      	add	sp, #8
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b086      	sub	sp, #24
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000a92:	2300      	movs	r3, #0
 8000a94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000a96:	2300      	movs	r3, #0
 8000a98:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000a9e:	e155      	b.n	8000d4c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	2101      	movs	r1, #1
 8000aa6:	697a      	ldr	r2, [r7, #20]
 8000aa8:	4091      	lsls	r1, r2
 8000aaa:	000a      	movs	r2, r1
 8000aac:	4013      	ands	r3, r2
 8000aae:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d100      	bne.n	8000ab8 <HAL_GPIO_Init+0x30>
 8000ab6:	e146      	b.n	8000d46 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	2b01      	cmp	r3, #1
 8000abe:	d00b      	beq.n	8000ad8 <HAL_GPIO_Init+0x50>
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	2b02      	cmp	r3, #2
 8000ac6:	d007      	beq.n	8000ad8 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000acc:	2b11      	cmp	r3, #17
 8000ace:	d003      	beq.n	8000ad8 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	2b12      	cmp	r3, #18
 8000ad6:	d130      	bne.n	8000b3a <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	689b      	ldr	r3, [r3, #8]
 8000adc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	005b      	lsls	r3, r3, #1
 8000ae2:	2203      	movs	r2, #3
 8000ae4:	409a      	lsls	r2, r3
 8000ae6:	0013      	movs	r3, r2
 8000ae8:	43da      	mvns	r2, r3
 8000aea:	693b      	ldr	r3, [r7, #16]
 8000aec:	4013      	ands	r3, r2
 8000aee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	68da      	ldr	r2, [r3, #12]
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	005b      	lsls	r3, r3, #1
 8000af8:	409a      	lsls	r2, r3
 8000afa:	0013      	movs	r3, r2
 8000afc:	693a      	ldr	r2, [r7, #16]
 8000afe:	4313      	orrs	r3, r2
 8000b00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	693a      	ldr	r2, [r7, #16]
 8000b06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b0e:	2201      	movs	r2, #1
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	409a      	lsls	r2, r3
 8000b14:	0013      	movs	r3, r2
 8000b16:	43da      	mvns	r2, r3
 8000b18:	693b      	ldr	r3, [r7, #16]
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	091b      	lsrs	r3, r3, #4
 8000b24:	2201      	movs	r2, #1
 8000b26:	401a      	ands	r2, r3
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	409a      	lsls	r2, r3
 8000b2c:	0013      	movs	r3, r2
 8000b2e:	693a      	ldr	r2, [r7, #16]
 8000b30:	4313      	orrs	r3, r2
 8000b32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	693a      	ldr	r2, [r7, #16]
 8000b38:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	68db      	ldr	r3, [r3, #12]
 8000b3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	005b      	lsls	r3, r3, #1
 8000b44:	2203      	movs	r2, #3
 8000b46:	409a      	lsls	r2, r3
 8000b48:	0013      	movs	r3, r2
 8000b4a:	43da      	mvns	r2, r3
 8000b4c:	693b      	ldr	r3, [r7, #16]
 8000b4e:	4013      	ands	r3, r2
 8000b50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	689a      	ldr	r2, [r3, #8]
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	005b      	lsls	r3, r3, #1
 8000b5a:	409a      	lsls	r2, r3
 8000b5c:	0013      	movs	r3, r2
 8000b5e:	693a      	ldr	r2, [r7, #16]
 8000b60:	4313      	orrs	r3, r2
 8000b62:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	2b02      	cmp	r3, #2
 8000b70:	d003      	beq.n	8000b7a <HAL_GPIO_Init+0xf2>
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	2b12      	cmp	r3, #18
 8000b78:	d123      	bne.n	8000bc2 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	08da      	lsrs	r2, r3, #3
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	3208      	adds	r2, #8
 8000b82:	0092      	lsls	r2, r2, #2
 8000b84:	58d3      	ldr	r3, [r2, r3]
 8000b86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	2207      	movs	r2, #7
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	009b      	lsls	r3, r3, #2
 8000b90:	220f      	movs	r2, #15
 8000b92:	409a      	lsls	r2, r3
 8000b94:	0013      	movs	r3, r2
 8000b96:	43da      	mvns	r2, r3
 8000b98:	693b      	ldr	r3, [r7, #16]
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	691a      	ldr	r2, [r3, #16]
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	2107      	movs	r1, #7
 8000ba6:	400b      	ands	r3, r1
 8000ba8:	009b      	lsls	r3, r3, #2
 8000baa:	409a      	lsls	r2, r3
 8000bac:	0013      	movs	r3, r2
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	08da      	lsrs	r2, r3, #3
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	3208      	adds	r2, #8
 8000bbc:	0092      	lsls	r2, r2, #2
 8000bbe:	6939      	ldr	r1, [r7, #16]
 8000bc0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	005b      	lsls	r3, r3, #1
 8000bcc:	2203      	movs	r2, #3
 8000bce:	409a      	lsls	r2, r3
 8000bd0:	0013      	movs	r3, r2
 8000bd2:	43da      	mvns	r2, r3
 8000bd4:	693b      	ldr	r3, [r7, #16]
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	2203      	movs	r2, #3
 8000be0:	401a      	ands	r2, r3
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	005b      	lsls	r3, r3, #1
 8000be6:	409a      	lsls	r2, r3
 8000be8:	0013      	movs	r3, r2
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	4313      	orrs	r3, r2
 8000bee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	685a      	ldr	r2, [r3, #4]
 8000bfa:	2380      	movs	r3, #128	; 0x80
 8000bfc:	055b      	lsls	r3, r3, #21
 8000bfe:	4013      	ands	r3, r2
 8000c00:	d100      	bne.n	8000c04 <HAL_GPIO_Init+0x17c>
 8000c02:	e0a0      	b.n	8000d46 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c04:	4b57      	ldr	r3, [pc, #348]	; (8000d64 <HAL_GPIO_Init+0x2dc>)
 8000c06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c08:	4b56      	ldr	r3, [pc, #344]	; (8000d64 <HAL_GPIO_Init+0x2dc>)
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	430a      	orrs	r2, r1
 8000c0e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c10:	4a55      	ldr	r2, [pc, #340]	; (8000d68 <HAL_GPIO_Init+0x2e0>)
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	089b      	lsrs	r3, r3, #2
 8000c16:	3302      	adds	r3, #2
 8000c18:	009b      	lsls	r3, r3, #2
 8000c1a:	589b      	ldr	r3, [r3, r2]
 8000c1c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	2203      	movs	r2, #3
 8000c22:	4013      	ands	r3, r2
 8000c24:	009b      	lsls	r3, r3, #2
 8000c26:	220f      	movs	r2, #15
 8000c28:	409a      	lsls	r2, r3
 8000c2a:	0013      	movs	r3, r2
 8000c2c:	43da      	mvns	r2, r3
 8000c2e:	693b      	ldr	r3, [r7, #16]
 8000c30:	4013      	ands	r3, r2
 8000c32:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000c34:	687a      	ldr	r2, [r7, #4]
 8000c36:	23a0      	movs	r3, #160	; 0xa0
 8000c38:	05db      	lsls	r3, r3, #23
 8000c3a:	429a      	cmp	r2, r3
 8000c3c:	d01f      	beq.n	8000c7e <HAL_GPIO_Init+0x1f6>
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4a4a      	ldr	r2, [pc, #296]	; (8000d6c <HAL_GPIO_Init+0x2e4>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d019      	beq.n	8000c7a <HAL_GPIO_Init+0x1f2>
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4a49      	ldr	r2, [pc, #292]	; (8000d70 <HAL_GPIO_Init+0x2e8>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d013      	beq.n	8000c76 <HAL_GPIO_Init+0x1ee>
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4a48      	ldr	r2, [pc, #288]	; (8000d74 <HAL_GPIO_Init+0x2ec>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d00d      	beq.n	8000c72 <HAL_GPIO_Init+0x1ea>
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4a47      	ldr	r2, [pc, #284]	; (8000d78 <HAL_GPIO_Init+0x2f0>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d007      	beq.n	8000c6e <HAL_GPIO_Init+0x1e6>
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4a46      	ldr	r2, [pc, #280]	; (8000d7c <HAL_GPIO_Init+0x2f4>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d101      	bne.n	8000c6a <HAL_GPIO_Init+0x1e2>
 8000c66:	2305      	movs	r3, #5
 8000c68:	e00a      	b.n	8000c80 <HAL_GPIO_Init+0x1f8>
 8000c6a:	2306      	movs	r3, #6
 8000c6c:	e008      	b.n	8000c80 <HAL_GPIO_Init+0x1f8>
 8000c6e:	2304      	movs	r3, #4
 8000c70:	e006      	b.n	8000c80 <HAL_GPIO_Init+0x1f8>
 8000c72:	2303      	movs	r3, #3
 8000c74:	e004      	b.n	8000c80 <HAL_GPIO_Init+0x1f8>
 8000c76:	2302      	movs	r3, #2
 8000c78:	e002      	b.n	8000c80 <HAL_GPIO_Init+0x1f8>
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	e000      	b.n	8000c80 <HAL_GPIO_Init+0x1f8>
 8000c7e:	2300      	movs	r3, #0
 8000c80:	697a      	ldr	r2, [r7, #20]
 8000c82:	2103      	movs	r1, #3
 8000c84:	400a      	ands	r2, r1
 8000c86:	0092      	lsls	r2, r2, #2
 8000c88:	4093      	lsls	r3, r2
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000c90:	4935      	ldr	r1, [pc, #212]	; (8000d68 <HAL_GPIO_Init+0x2e0>)
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	089b      	lsrs	r3, r3, #2
 8000c96:	3302      	adds	r3, #2
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c9e:	4b38      	ldr	r3, [pc, #224]	; (8000d80 <HAL_GPIO_Init+0x2f8>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	43da      	mvns	r2, r3
 8000ca8:	693b      	ldr	r3, [r7, #16]
 8000caa:	4013      	ands	r3, r2
 8000cac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	685a      	ldr	r2, [r3, #4]
 8000cb2:	2380      	movs	r3, #128	; 0x80
 8000cb4:	025b      	lsls	r3, r3, #9
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	d003      	beq.n	8000cc2 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000cc2:	4b2f      	ldr	r3, [pc, #188]	; (8000d80 <HAL_GPIO_Init+0x2f8>)
 8000cc4:	693a      	ldr	r2, [r7, #16]
 8000cc6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000cc8:	4b2d      	ldr	r3, [pc, #180]	; (8000d80 <HAL_GPIO_Init+0x2f8>)
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	43da      	mvns	r2, r3
 8000cd2:	693b      	ldr	r3, [r7, #16]
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	685a      	ldr	r2, [r3, #4]
 8000cdc:	2380      	movs	r3, #128	; 0x80
 8000cde:	029b      	lsls	r3, r3, #10
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	d003      	beq.n	8000cec <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000ce4:	693a      	ldr	r2, [r7, #16]
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000cec:	4b24      	ldr	r3, [pc, #144]	; (8000d80 <HAL_GPIO_Init+0x2f8>)
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cf2:	4b23      	ldr	r3, [pc, #140]	; (8000d80 <HAL_GPIO_Init+0x2f8>)
 8000cf4:	689b      	ldr	r3, [r3, #8]
 8000cf6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	43da      	mvns	r2, r3
 8000cfc:	693b      	ldr	r3, [r7, #16]
 8000cfe:	4013      	ands	r3, r2
 8000d00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	685a      	ldr	r2, [r3, #4]
 8000d06:	2380      	movs	r3, #128	; 0x80
 8000d08:	035b      	lsls	r3, r3, #13
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	d003      	beq.n	8000d16 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	4313      	orrs	r3, r2
 8000d14:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d16:	4b1a      	ldr	r3, [pc, #104]	; (8000d80 <HAL_GPIO_Init+0x2f8>)
 8000d18:	693a      	ldr	r2, [r7, #16]
 8000d1a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000d1c:	4b18      	ldr	r3, [pc, #96]	; (8000d80 <HAL_GPIO_Init+0x2f8>)
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	43da      	mvns	r2, r3
 8000d26:	693b      	ldr	r3, [r7, #16]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	685a      	ldr	r2, [r3, #4]
 8000d30:	2380      	movs	r3, #128	; 0x80
 8000d32:	039b      	lsls	r3, r3, #14
 8000d34:	4013      	ands	r3, r2
 8000d36:	d003      	beq.n	8000d40 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8000d38:	693a      	ldr	r2, [r7, #16]
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d40:	4b0f      	ldr	r3, [pc, #60]	; (8000d80 <HAL_GPIO_Init+0x2f8>)
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	3301      	adds	r3, #1
 8000d4a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	40da      	lsrs	r2, r3
 8000d54:	1e13      	subs	r3, r2, #0
 8000d56:	d000      	beq.n	8000d5a <HAL_GPIO_Init+0x2d2>
 8000d58:	e6a2      	b.n	8000aa0 <HAL_GPIO_Init+0x18>
  }
}
 8000d5a:	46c0      	nop			; (mov r8, r8)
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	b006      	add	sp, #24
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	46c0      	nop			; (mov r8, r8)
 8000d64:	40021000 	.word	0x40021000
 8000d68:	40010000 	.word	0x40010000
 8000d6c:	50000400 	.word	0x50000400
 8000d70:	50000800 	.word	0x50000800
 8000d74:	50000c00 	.word	0x50000c00
 8000d78:	50001000 	.word	0x50001000
 8000d7c:	50001c00 	.word	0x50001c00
 8000d80:	40010400 	.word	0x40010400

08000d84 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	0008      	movs	r0, r1
 8000d8e:	0011      	movs	r1, r2
 8000d90:	1cbb      	adds	r3, r7, #2
 8000d92:	1c02      	adds	r2, r0, #0
 8000d94:	801a      	strh	r2, [r3, #0]
 8000d96:	1c7b      	adds	r3, r7, #1
 8000d98:	1c0a      	adds	r2, r1, #0
 8000d9a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d9c:	1c7b      	adds	r3, r7, #1
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d004      	beq.n	8000dae <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000da4:	1cbb      	adds	r3, r7, #2
 8000da6:	881a      	ldrh	r2, [r3, #0]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000dac:	e003      	b.n	8000db6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8000dae:	1cbb      	adds	r3, r7, #2
 8000db0:	881a      	ldrh	r2, [r3, #0]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000db6:	46c0      	nop			; (mov r8, r8)
 8000db8:	46bd      	mov	sp, r7
 8000dba:	b002      	add	sp, #8
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b084      	sub	sp, #16
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
 8000dc6:	000a      	movs	r2, r1
 8000dc8:	1cbb      	adds	r3, r7, #2
 8000dca:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	695b      	ldr	r3, [r3, #20]
 8000dd0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000dd2:	1cbb      	adds	r3, r7, #2
 8000dd4:	881b      	ldrh	r3, [r3, #0]
 8000dd6:	68fa      	ldr	r2, [r7, #12]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	041a      	lsls	r2, r3, #16
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	43db      	mvns	r3, r3
 8000de0:	1cb9      	adds	r1, r7, #2
 8000de2:	8809      	ldrh	r1, [r1, #0]
 8000de4:	400b      	ands	r3, r1
 8000de6:	431a      	orrs	r2, r3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	619a      	str	r2, [r3, #24]
}
 8000dec:	46c0      	nop			; (mov r8, r8)
 8000dee:	46bd      	mov	sp, r7
 8000df0:	b004      	add	sp, #16
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000df4:	b5b0      	push	{r4, r5, r7, lr}
 8000df6:	b08a      	sub	sp, #40	; 0x28
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d102      	bne.n	8000e08 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
 8000e04:	f000 fbc2 	bl	800158c <HAL_RCC_OscConfig+0x798>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e08:	4bca      	ldr	r3, [pc, #808]	; (8001134 <HAL_RCC_OscConfig+0x340>)
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	220c      	movs	r2, #12
 8000e0e:	4013      	ands	r3, r2
 8000e10:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e12:	4bc8      	ldr	r3, [pc, #800]	; (8001134 <HAL_RCC_OscConfig+0x340>)
 8000e14:	68da      	ldr	r2, [r3, #12]
 8000e16:	2380      	movs	r3, #128	; 0x80
 8000e18:	025b      	lsls	r3, r3, #9
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	2201      	movs	r2, #1
 8000e24:	4013      	ands	r3, r2
 8000e26:	d100      	bne.n	8000e2a <HAL_RCC_OscConfig+0x36>
 8000e28:	e07e      	b.n	8000f28 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	2b08      	cmp	r3, #8
 8000e2e:	d007      	beq.n	8000e40 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	2b0c      	cmp	r3, #12
 8000e34:	d112      	bne.n	8000e5c <HAL_RCC_OscConfig+0x68>
 8000e36:	69ba      	ldr	r2, [r7, #24]
 8000e38:	2380      	movs	r3, #128	; 0x80
 8000e3a:	025b      	lsls	r3, r3, #9
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d10d      	bne.n	8000e5c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e40:	4bbc      	ldr	r3, [pc, #752]	; (8001134 <HAL_RCC_OscConfig+0x340>)
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	2380      	movs	r3, #128	; 0x80
 8000e46:	029b      	lsls	r3, r3, #10
 8000e48:	4013      	ands	r3, r2
 8000e4a:	d100      	bne.n	8000e4e <HAL_RCC_OscConfig+0x5a>
 8000e4c:	e06b      	b.n	8000f26 <HAL_RCC_OscConfig+0x132>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d167      	bne.n	8000f26 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	f000 fb98 	bl	800158c <HAL_RCC_OscConfig+0x798>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	685a      	ldr	r2, [r3, #4]
 8000e60:	2380      	movs	r3, #128	; 0x80
 8000e62:	025b      	lsls	r3, r3, #9
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d107      	bne.n	8000e78 <HAL_RCC_OscConfig+0x84>
 8000e68:	4bb2      	ldr	r3, [pc, #712]	; (8001134 <HAL_RCC_OscConfig+0x340>)
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	4bb1      	ldr	r3, [pc, #708]	; (8001134 <HAL_RCC_OscConfig+0x340>)
 8000e6e:	2180      	movs	r1, #128	; 0x80
 8000e70:	0249      	lsls	r1, r1, #9
 8000e72:	430a      	orrs	r2, r1
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	e027      	b.n	8000ec8 <HAL_RCC_OscConfig+0xd4>
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	685a      	ldr	r2, [r3, #4]
 8000e7c:	23a0      	movs	r3, #160	; 0xa0
 8000e7e:	02db      	lsls	r3, r3, #11
 8000e80:	429a      	cmp	r2, r3
 8000e82:	d10e      	bne.n	8000ea2 <HAL_RCC_OscConfig+0xae>
 8000e84:	4bab      	ldr	r3, [pc, #684]	; (8001134 <HAL_RCC_OscConfig+0x340>)
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	4baa      	ldr	r3, [pc, #680]	; (8001134 <HAL_RCC_OscConfig+0x340>)
 8000e8a:	2180      	movs	r1, #128	; 0x80
 8000e8c:	02c9      	lsls	r1, r1, #11
 8000e8e:	430a      	orrs	r2, r1
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	4ba8      	ldr	r3, [pc, #672]	; (8001134 <HAL_RCC_OscConfig+0x340>)
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	4ba7      	ldr	r3, [pc, #668]	; (8001134 <HAL_RCC_OscConfig+0x340>)
 8000e98:	2180      	movs	r1, #128	; 0x80
 8000e9a:	0249      	lsls	r1, r1, #9
 8000e9c:	430a      	orrs	r2, r1
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	e012      	b.n	8000ec8 <HAL_RCC_OscConfig+0xd4>
 8000ea2:	4ba4      	ldr	r3, [pc, #656]	; (8001134 <HAL_RCC_OscConfig+0x340>)
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	4ba3      	ldr	r3, [pc, #652]	; (8001134 <HAL_RCC_OscConfig+0x340>)
 8000ea8:	49a3      	ldr	r1, [pc, #652]	; (8001138 <HAL_RCC_OscConfig+0x344>)
 8000eaa:	400a      	ands	r2, r1
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	4ba1      	ldr	r3, [pc, #644]	; (8001134 <HAL_RCC_OscConfig+0x340>)
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	2380      	movs	r3, #128	; 0x80
 8000eb4:	025b      	lsls	r3, r3, #9
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	4b9d      	ldr	r3, [pc, #628]	; (8001134 <HAL_RCC_OscConfig+0x340>)
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	4b9c      	ldr	r3, [pc, #624]	; (8001134 <HAL_RCC_OscConfig+0x340>)
 8000ec2:	499e      	ldr	r1, [pc, #632]	; (800113c <HAL_RCC_OscConfig+0x348>)
 8000ec4:	400a      	ands	r2, r1
 8000ec6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d015      	beq.n	8000efc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ed0:	f7ff fcfa 	bl	80008c8 <HAL_GetTick>
 8000ed4:	0003      	movs	r3, r0
 8000ed6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000ed8:	e009      	b.n	8000eee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000eda:	f7ff fcf5 	bl	80008c8 <HAL_GetTick>
 8000ede:	0002      	movs	r2, r0
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	1ad3      	subs	r3, r2, r3
 8000ee4:	2b64      	cmp	r3, #100	; 0x64
 8000ee6:	d902      	bls.n	8000eee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000ee8:	2303      	movs	r3, #3
 8000eea:	f000 fb4f 	bl	800158c <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000eee:	4b91      	ldr	r3, [pc, #580]	; (8001134 <HAL_RCC_OscConfig+0x340>)
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	2380      	movs	r3, #128	; 0x80
 8000ef4:	029b      	lsls	r3, r3, #10
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	d0ef      	beq.n	8000eda <HAL_RCC_OscConfig+0xe6>
 8000efa:	e015      	b.n	8000f28 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000efc:	f7ff fce4 	bl	80008c8 <HAL_GetTick>
 8000f00:	0003      	movs	r3, r0
 8000f02:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000f04:	e008      	b.n	8000f18 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f06:	f7ff fcdf 	bl	80008c8 <HAL_GetTick>
 8000f0a:	0002      	movs	r2, r0
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	1ad3      	subs	r3, r2, r3
 8000f10:	2b64      	cmp	r3, #100	; 0x64
 8000f12:	d901      	bls.n	8000f18 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8000f14:	2303      	movs	r3, #3
 8000f16:	e339      	b.n	800158c <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000f18:	4b86      	ldr	r3, [pc, #536]	; (8001134 <HAL_RCC_OscConfig+0x340>)
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	2380      	movs	r3, #128	; 0x80
 8000f1e:	029b      	lsls	r3, r3, #10
 8000f20:	4013      	ands	r3, r2
 8000f22:	d1f0      	bne.n	8000f06 <HAL_RCC_OscConfig+0x112>
 8000f24:	e000      	b.n	8000f28 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f26:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2202      	movs	r2, #2
 8000f2e:	4013      	ands	r3, r2
 8000f30:	d100      	bne.n	8000f34 <HAL_RCC_OscConfig+0x140>
 8000f32:	e09a      	b.n	800106a <HAL_RCC_OscConfig+0x276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8000f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f3c:	2220      	movs	r2, #32
 8000f3e:	4013      	ands	r3, r2
 8000f40:	d009      	beq.n	8000f56 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8000f42:	4b7c      	ldr	r3, [pc, #496]	; (8001134 <HAL_RCC_OscConfig+0x340>)
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	4b7b      	ldr	r3, [pc, #492]	; (8001134 <HAL_RCC_OscConfig+0x340>)
 8000f48:	2120      	movs	r1, #32
 8000f4a:	430a      	orrs	r2, r1
 8000f4c:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8000f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f50:	2220      	movs	r2, #32
 8000f52:	4393      	bics	r3, r2
 8000f54:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	2b04      	cmp	r3, #4
 8000f5a:	d005      	beq.n	8000f68 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	2b0c      	cmp	r3, #12
 8000f60:	d13f      	bne.n	8000fe2 <HAL_RCC_OscConfig+0x1ee>
 8000f62:	69bb      	ldr	r3, [r7, #24]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d13c      	bne.n	8000fe2 <HAL_RCC_OscConfig+0x1ee>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8000f68:	4b72      	ldr	r3, [pc, #456]	; (8001134 <HAL_RCC_OscConfig+0x340>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2204      	movs	r2, #4
 8000f6e:	4013      	ands	r3, r2
 8000f70:	d004      	beq.n	8000f7c <HAL_RCC_OscConfig+0x188>
 8000f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d101      	bne.n	8000f7c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	e307      	b.n	800158c <HAL_RCC_OscConfig+0x798>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f7c:	4b6d      	ldr	r3, [pc, #436]	; (8001134 <HAL_RCC_OscConfig+0x340>)
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	4a6f      	ldr	r2, [pc, #444]	; (8001140 <HAL_RCC_OscConfig+0x34c>)
 8000f82:	4013      	ands	r3, r2
 8000f84:	0019      	movs	r1, r3
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	691b      	ldr	r3, [r3, #16]
 8000f8a:	021a      	lsls	r2, r3, #8
 8000f8c:	4b69      	ldr	r3, [pc, #420]	; (8001134 <HAL_RCC_OscConfig+0x340>)
 8000f8e:	430a      	orrs	r2, r1
 8000f90:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000f92:	4b68      	ldr	r3, [pc, #416]	; (8001134 <HAL_RCC_OscConfig+0x340>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	2209      	movs	r2, #9
 8000f98:	4393      	bics	r3, r2
 8000f9a:	0019      	movs	r1, r3
 8000f9c:	4b65      	ldr	r3, [pc, #404]	; (8001134 <HAL_RCC_OscConfig+0x340>)
 8000f9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fa0:	430a      	orrs	r2, r1
 8000fa2:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000fa4:	f000 fc44 	bl	8001830 <HAL_RCC_GetSysClockFreq>
 8000fa8:	0001      	movs	r1, r0
 8000faa:	4b62      	ldr	r3, [pc, #392]	; (8001134 <HAL_RCC_OscConfig+0x340>)
 8000fac:	68db      	ldr	r3, [r3, #12]
 8000fae:	091b      	lsrs	r3, r3, #4
 8000fb0:	220f      	movs	r2, #15
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	4a63      	ldr	r2, [pc, #396]	; (8001144 <HAL_RCC_OscConfig+0x350>)
 8000fb6:	5cd3      	ldrb	r3, [r2, r3]
 8000fb8:	000a      	movs	r2, r1
 8000fba:	40da      	lsrs	r2, r3
 8000fbc:	4b62      	ldr	r3, [pc, #392]	; (8001148 <HAL_RCC_OscConfig+0x354>)
 8000fbe:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8000fc0:	4b62      	ldr	r3, [pc, #392]	; (800114c <HAL_RCC_OscConfig+0x358>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2513      	movs	r5, #19
 8000fc6:	197c      	adds	r4, r7, r5
 8000fc8:	0018      	movs	r0, r3
 8000fca:	f7ff fc37 	bl	800083c <HAL_InitTick>
 8000fce:	0003      	movs	r3, r0
 8000fd0:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8000fd2:	197b      	adds	r3, r7, r5
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d047      	beq.n	800106a <HAL_RCC_OscConfig+0x276>
      {
        return status;
 8000fda:	2313      	movs	r3, #19
 8000fdc:	18fb      	adds	r3, r7, r3
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	e2d4      	b.n	800158c <HAL_RCC_OscConfig+0x798>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8000fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d027      	beq.n	8001038 <HAL_RCC_OscConfig+0x244>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000fe8:	4b52      	ldr	r3, [pc, #328]	; (8001134 <HAL_RCC_OscConfig+0x340>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2209      	movs	r2, #9
 8000fee:	4393      	bics	r3, r2
 8000ff0:	0019      	movs	r1, r3
 8000ff2:	4b50      	ldr	r3, [pc, #320]	; (8001134 <HAL_RCC_OscConfig+0x340>)
 8000ff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ff6:	430a      	orrs	r2, r1
 8000ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ffa:	f7ff fc65 	bl	80008c8 <HAL_GetTick>
 8000ffe:	0003      	movs	r3, r0
 8001000:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001002:	e008      	b.n	8001016 <HAL_RCC_OscConfig+0x222>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001004:	f7ff fc60 	bl	80008c8 <HAL_GetTick>
 8001008:	0002      	movs	r2, r0
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	2b02      	cmp	r3, #2
 8001010:	d901      	bls.n	8001016 <HAL_RCC_OscConfig+0x222>
          {
            return HAL_TIMEOUT;
 8001012:	2303      	movs	r3, #3
 8001014:	e2ba      	b.n	800158c <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001016:	4b47      	ldr	r3, [pc, #284]	; (8001134 <HAL_RCC_OscConfig+0x340>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	2204      	movs	r2, #4
 800101c:	4013      	ands	r3, r2
 800101e:	d0f1      	beq.n	8001004 <HAL_RCC_OscConfig+0x210>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001020:	4b44      	ldr	r3, [pc, #272]	; (8001134 <HAL_RCC_OscConfig+0x340>)
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	4a46      	ldr	r2, [pc, #280]	; (8001140 <HAL_RCC_OscConfig+0x34c>)
 8001026:	4013      	ands	r3, r2
 8001028:	0019      	movs	r1, r3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	691b      	ldr	r3, [r3, #16]
 800102e:	021a      	lsls	r2, r3, #8
 8001030:	4b40      	ldr	r3, [pc, #256]	; (8001134 <HAL_RCC_OscConfig+0x340>)
 8001032:	430a      	orrs	r2, r1
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	e018      	b.n	800106a <HAL_RCC_OscConfig+0x276>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001038:	4b3e      	ldr	r3, [pc, #248]	; (8001134 <HAL_RCC_OscConfig+0x340>)
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	4b3d      	ldr	r3, [pc, #244]	; (8001134 <HAL_RCC_OscConfig+0x340>)
 800103e:	2101      	movs	r1, #1
 8001040:	438a      	bics	r2, r1
 8001042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001044:	f7ff fc40 	bl	80008c8 <HAL_GetTick>
 8001048:	0003      	movs	r3, r0
 800104a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800104c:	e008      	b.n	8001060 <HAL_RCC_OscConfig+0x26c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800104e:	f7ff fc3b 	bl	80008c8 <HAL_GetTick>
 8001052:	0002      	movs	r2, r0
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	2b02      	cmp	r3, #2
 800105a:	d901      	bls.n	8001060 <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 800105c:	2303      	movs	r3, #3
 800105e:	e295      	b.n	800158c <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001060:	4b34      	ldr	r3, [pc, #208]	; (8001134 <HAL_RCC_OscConfig+0x340>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2204      	movs	r2, #4
 8001066:	4013      	ands	r3, r2
 8001068:	d1f1      	bne.n	800104e <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2210      	movs	r2, #16
 8001070:	4013      	ands	r3, r2
 8001072:	d100      	bne.n	8001076 <HAL_RCC_OscConfig+0x282>
 8001074:	e0a3      	b.n	80011be <HAL_RCC_OscConfig+0x3ca>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d141      	bne.n	8001100 <HAL_RCC_OscConfig+0x30c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800107c:	4b2d      	ldr	r3, [pc, #180]	; (8001134 <HAL_RCC_OscConfig+0x340>)
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	2380      	movs	r3, #128	; 0x80
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	4013      	ands	r3, r2
 8001086:	d005      	beq.n	8001094 <HAL_RCC_OscConfig+0x2a0>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	69db      	ldr	r3, [r3, #28]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d101      	bne.n	8001094 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 8001090:	2301      	movs	r3, #1
 8001092:	e27b      	b.n	800158c <HAL_RCC_OscConfig+0x798>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001094:	4b27      	ldr	r3, [pc, #156]	; (8001134 <HAL_RCC_OscConfig+0x340>)
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	4a2d      	ldr	r2, [pc, #180]	; (8001150 <HAL_RCC_OscConfig+0x35c>)
 800109a:	4013      	ands	r3, r2
 800109c:	0019      	movs	r1, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010a2:	4b24      	ldr	r3, [pc, #144]	; (8001134 <HAL_RCC_OscConfig+0x340>)
 80010a4:	430a      	orrs	r2, r1
 80010a6:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010a8:	4b22      	ldr	r3, [pc, #136]	; (8001134 <HAL_RCC_OscConfig+0x340>)
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	021b      	lsls	r3, r3, #8
 80010ae:	0a19      	lsrs	r1, r3, #8
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6a1b      	ldr	r3, [r3, #32]
 80010b4:	061a      	lsls	r2, r3, #24
 80010b6:	4b1f      	ldr	r3, [pc, #124]	; (8001134 <HAL_RCC_OscConfig+0x340>)
 80010b8:	430a      	orrs	r2, r1
 80010ba:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c0:	0b5b      	lsrs	r3, r3, #13
 80010c2:	3301      	adds	r3, #1
 80010c4:	2280      	movs	r2, #128	; 0x80
 80010c6:	0212      	lsls	r2, r2, #8
 80010c8:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80010ca:	4b1a      	ldr	r3, [pc, #104]	; (8001134 <HAL_RCC_OscConfig+0x340>)
 80010cc:	68db      	ldr	r3, [r3, #12]
 80010ce:	091b      	lsrs	r3, r3, #4
 80010d0:	210f      	movs	r1, #15
 80010d2:	400b      	ands	r3, r1
 80010d4:	491b      	ldr	r1, [pc, #108]	; (8001144 <HAL_RCC_OscConfig+0x350>)
 80010d6:	5ccb      	ldrb	r3, [r1, r3]
 80010d8:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80010da:	4b1b      	ldr	r3, [pc, #108]	; (8001148 <HAL_RCC_OscConfig+0x354>)
 80010dc:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80010de:	4b1b      	ldr	r3, [pc, #108]	; (800114c <HAL_RCC_OscConfig+0x358>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	2513      	movs	r5, #19
 80010e4:	197c      	adds	r4, r7, r5
 80010e6:	0018      	movs	r0, r3
 80010e8:	f7ff fba8 	bl	800083c <HAL_InitTick>
 80010ec:	0003      	movs	r3, r0
 80010ee:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80010f0:	197b      	adds	r3, r7, r5
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d062      	beq.n	80011be <HAL_RCC_OscConfig+0x3ca>
        {
          return status;
 80010f8:	2313      	movs	r3, #19
 80010fa:	18fb      	adds	r3, r7, r3
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	e245      	b.n	800158c <HAL_RCC_OscConfig+0x798>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	69db      	ldr	r3, [r3, #28]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d040      	beq.n	800118a <HAL_RCC_OscConfig+0x396>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001108:	4b0a      	ldr	r3, [pc, #40]	; (8001134 <HAL_RCC_OscConfig+0x340>)
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	4b09      	ldr	r3, [pc, #36]	; (8001134 <HAL_RCC_OscConfig+0x340>)
 800110e:	2180      	movs	r1, #128	; 0x80
 8001110:	0049      	lsls	r1, r1, #1
 8001112:	430a      	orrs	r2, r1
 8001114:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001116:	f7ff fbd7 	bl	80008c8 <HAL_GetTick>
 800111a:	0003      	movs	r3, r0
 800111c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800111e:	e019      	b.n	8001154 <HAL_RCC_OscConfig+0x360>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001120:	f7ff fbd2 	bl	80008c8 <HAL_GetTick>
 8001124:	0002      	movs	r2, r0
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	2b02      	cmp	r3, #2
 800112c:	d912      	bls.n	8001154 <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 800112e:	2303      	movs	r3, #3
 8001130:	e22c      	b.n	800158c <HAL_RCC_OscConfig+0x798>
 8001132:	46c0      	nop			; (mov r8, r8)
 8001134:	40021000 	.word	0x40021000
 8001138:	fffeffff 	.word	0xfffeffff
 800113c:	fffbffff 	.word	0xfffbffff
 8001140:	ffffe0ff 	.word	0xffffe0ff
 8001144:	08002650 	.word	0x08002650
 8001148:	20000000 	.word	0x20000000
 800114c:	20000004 	.word	0x20000004
 8001150:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001154:	4bc6      	ldr	r3, [pc, #792]	; (8001470 <HAL_RCC_OscConfig+0x67c>)
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	2380      	movs	r3, #128	; 0x80
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	4013      	ands	r3, r2
 800115e:	d0df      	beq.n	8001120 <HAL_RCC_OscConfig+0x32c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001160:	4bc3      	ldr	r3, [pc, #780]	; (8001470 <HAL_RCC_OscConfig+0x67c>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	4ac3      	ldr	r2, [pc, #780]	; (8001474 <HAL_RCC_OscConfig+0x680>)
 8001166:	4013      	ands	r3, r2
 8001168:	0019      	movs	r1, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800116e:	4bc0      	ldr	r3, [pc, #768]	; (8001470 <HAL_RCC_OscConfig+0x67c>)
 8001170:	430a      	orrs	r2, r1
 8001172:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001174:	4bbe      	ldr	r3, [pc, #760]	; (8001470 <HAL_RCC_OscConfig+0x67c>)
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	021b      	lsls	r3, r3, #8
 800117a:	0a19      	lsrs	r1, r3, #8
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6a1b      	ldr	r3, [r3, #32]
 8001180:	061a      	lsls	r2, r3, #24
 8001182:	4bbb      	ldr	r3, [pc, #748]	; (8001470 <HAL_RCC_OscConfig+0x67c>)
 8001184:	430a      	orrs	r2, r1
 8001186:	605a      	str	r2, [r3, #4]
 8001188:	e019      	b.n	80011be <HAL_RCC_OscConfig+0x3ca>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800118a:	4bb9      	ldr	r3, [pc, #740]	; (8001470 <HAL_RCC_OscConfig+0x67c>)
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	4bb8      	ldr	r3, [pc, #736]	; (8001470 <HAL_RCC_OscConfig+0x67c>)
 8001190:	49b9      	ldr	r1, [pc, #740]	; (8001478 <HAL_RCC_OscConfig+0x684>)
 8001192:	400a      	ands	r2, r1
 8001194:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001196:	f7ff fb97 	bl	80008c8 <HAL_GetTick>
 800119a:	0003      	movs	r3, r0
 800119c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800119e:	e008      	b.n	80011b2 <HAL_RCC_OscConfig+0x3be>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011a0:	f7ff fb92 	bl	80008c8 <HAL_GetTick>
 80011a4:	0002      	movs	r2, r0
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	d901      	bls.n	80011b2 <HAL_RCC_OscConfig+0x3be>
          {
            return HAL_TIMEOUT;
 80011ae:	2303      	movs	r3, #3
 80011b0:	e1ec      	b.n	800158c <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80011b2:	4baf      	ldr	r3, [pc, #700]	; (8001470 <HAL_RCC_OscConfig+0x67c>)
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	2380      	movs	r3, #128	; 0x80
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	4013      	ands	r3, r2
 80011bc:	d1f0      	bne.n	80011a0 <HAL_RCC_OscConfig+0x3ac>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	2208      	movs	r2, #8
 80011c4:	4013      	ands	r3, r2
 80011c6:	d036      	beq.n	8001236 <HAL_RCC_OscConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	695b      	ldr	r3, [r3, #20]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d019      	beq.n	8001204 <HAL_RCC_OscConfig+0x410>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011d0:	4ba7      	ldr	r3, [pc, #668]	; (8001470 <HAL_RCC_OscConfig+0x67c>)
 80011d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80011d4:	4ba6      	ldr	r3, [pc, #664]	; (8001470 <HAL_RCC_OscConfig+0x67c>)
 80011d6:	2101      	movs	r1, #1
 80011d8:	430a      	orrs	r2, r1
 80011da:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011dc:	f7ff fb74 	bl	80008c8 <HAL_GetTick>
 80011e0:	0003      	movs	r3, r0
 80011e2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80011e4:	e008      	b.n	80011f8 <HAL_RCC_OscConfig+0x404>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011e6:	f7ff fb6f 	bl	80008c8 <HAL_GetTick>
 80011ea:	0002      	movs	r2, r0
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d901      	bls.n	80011f8 <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 80011f4:	2303      	movs	r3, #3
 80011f6:	e1c9      	b.n	800158c <HAL_RCC_OscConfig+0x798>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80011f8:	4b9d      	ldr	r3, [pc, #628]	; (8001470 <HAL_RCC_OscConfig+0x67c>)
 80011fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011fc:	2202      	movs	r2, #2
 80011fe:	4013      	ands	r3, r2
 8001200:	d0f1      	beq.n	80011e6 <HAL_RCC_OscConfig+0x3f2>
 8001202:	e018      	b.n	8001236 <HAL_RCC_OscConfig+0x442>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001204:	4b9a      	ldr	r3, [pc, #616]	; (8001470 <HAL_RCC_OscConfig+0x67c>)
 8001206:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001208:	4b99      	ldr	r3, [pc, #612]	; (8001470 <HAL_RCC_OscConfig+0x67c>)
 800120a:	2101      	movs	r1, #1
 800120c:	438a      	bics	r2, r1
 800120e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001210:	f7ff fb5a 	bl	80008c8 <HAL_GetTick>
 8001214:	0003      	movs	r3, r0
 8001216:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001218:	e008      	b.n	800122c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800121a:	f7ff fb55 	bl	80008c8 <HAL_GetTick>
 800121e:	0002      	movs	r2, r0
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	2b02      	cmp	r3, #2
 8001226:	d901      	bls.n	800122c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001228:	2303      	movs	r3, #3
 800122a:	e1af      	b.n	800158c <HAL_RCC_OscConfig+0x798>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800122c:	4b90      	ldr	r3, [pc, #576]	; (8001470 <HAL_RCC_OscConfig+0x67c>)
 800122e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001230:	2202      	movs	r2, #2
 8001232:	4013      	ands	r3, r2
 8001234:	d1f1      	bne.n	800121a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2204      	movs	r2, #4
 800123c:	4013      	ands	r3, r2
 800123e:	d100      	bne.n	8001242 <HAL_RCC_OscConfig+0x44e>
 8001240:	e0af      	b.n	80013a2 <HAL_RCC_OscConfig+0x5ae>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001242:	2323      	movs	r3, #35	; 0x23
 8001244:	18fb      	adds	r3, r7, r3
 8001246:	2200      	movs	r2, #0
 8001248:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800124a:	4b89      	ldr	r3, [pc, #548]	; (8001470 <HAL_RCC_OscConfig+0x67c>)
 800124c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800124e:	2380      	movs	r3, #128	; 0x80
 8001250:	055b      	lsls	r3, r3, #21
 8001252:	4013      	ands	r3, r2
 8001254:	d10a      	bne.n	800126c <HAL_RCC_OscConfig+0x478>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001256:	4b86      	ldr	r3, [pc, #536]	; (8001470 <HAL_RCC_OscConfig+0x67c>)
 8001258:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800125a:	4b85      	ldr	r3, [pc, #532]	; (8001470 <HAL_RCC_OscConfig+0x67c>)
 800125c:	2180      	movs	r1, #128	; 0x80
 800125e:	0549      	lsls	r1, r1, #21
 8001260:	430a      	orrs	r2, r1
 8001262:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001264:	2323      	movs	r3, #35	; 0x23
 8001266:	18fb      	adds	r3, r7, r3
 8001268:	2201      	movs	r2, #1
 800126a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800126c:	4b83      	ldr	r3, [pc, #524]	; (800147c <HAL_RCC_OscConfig+0x688>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	2380      	movs	r3, #128	; 0x80
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	4013      	ands	r3, r2
 8001276:	d11a      	bne.n	80012ae <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001278:	4b80      	ldr	r3, [pc, #512]	; (800147c <HAL_RCC_OscConfig+0x688>)
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	4b7f      	ldr	r3, [pc, #508]	; (800147c <HAL_RCC_OscConfig+0x688>)
 800127e:	2180      	movs	r1, #128	; 0x80
 8001280:	0049      	lsls	r1, r1, #1
 8001282:	430a      	orrs	r2, r1
 8001284:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001286:	f7ff fb1f 	bl	80008c8 <HAL_GetTick>
 800128a:	0003      	movs	r3, r0
 800128c:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800128e:	e008      	b.n	80012a2 <HAL_RCC_OscConfig+0x4ae>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001290:	f7ff fb1a 	bl	80008c8 <HAL_GetTick>
 8001294:	0002      	movs	r2, r0
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	2b64      	cmp	r3, #100	; 0x64
 800129c:	d901      	bls.n	80012a2 <HAL_RCC_OscConfig+0x4ae>
        {
          return HAL_TIMEOUT;
 800129e:	2303      	movs	r3, #3
 80012a0:	e174      	b.n	800158c <HAL_RCC_OscConfig+0x798>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012a2:	4b76      	ldr	r3, [pc, #472]	; (800147c <HAL_RCC_OscConfig+0x688>)
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	2380      	movs	r3, #128	; 0x80
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	4013      	ands	r3, r2
 80012ac:	d0f0      	beq.n	8001290 <HAL_RCC_OscConfig+0x49c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	689a      	ldr	r2, [r3, #8]
 80012b2:	2380      	movs	r3, #128	; 0x80
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d107      	bne.n	80012ca <HAL_RCC_OscConfig+0x4d6>
 80012ba:	4b6d      	ldr	r3, [pc, #436]	; (8001470 <HAL_RCC_OscConfig+0x67c>)
 80012bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012be:	4b6c      	ldr	r3, [pc, #432]	; (8001470 <HAL_RCC_OscConfig+0x67c>)
 80012c0:	2180      	movs	r1, #128	; 0x80
 80012c2:	0049      	lsls	r1, r1, #1
 80012c4:	430a      	orrs	r2, r1
 80012c6:	651a      	str	r2, [r3, #80]	; 0x50
 80012c8:	e031      	b.n	800132e <HAL_RCC_OscConfig+0x53a>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d10c      	bne.n	80012ec <HAL_RCC_OscConfig+0x4f8>
 80012d2:	4b67      	ldr	r3, [pc, #412]	; (8001470 <HAL_RCC_OscConfig+0x67c>)
 80012d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012d6:	4b66      	ldr	r3, [pc, #408]	; (8001470 <HAL_RCC_OscConfig+0x67c>)
 80012d8:	4967      	ldr	r1, [pc, #412]	; (8001478 <HAL_RCC_OscConfig+0x684>)
 80012da:	400a      	ands	r2, r1
 80012dc:	651a      	str	r2, [r3, #80]	; 0x50
 80012de:	4b64      	ldr	r3, [pc, #400]	; (8001470 <HAL_RCC_OscConfig+0x67c>)
 80012e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012e2:	4b63      	ldr	r3, [pc, #396]	; (8001470 <HAL_RCC_OscConfig+0x67c>)
 80012e4:	4966      	ldr	r1, [pc, #408]	; (8001480 <HAL_RCC_OscConfig+0x68c>)
 80012e6:	400a      	ands	r2, r1
 80012e8:	651a      	str	r2, [r3, #80]	; 0x50
 80012ea:	e020      	b.n	800132e <HAL_RCC_OscConfig+0x53a>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	689a      	ldr	r2, [r3, #8]
 80012f0:	23a0      	movs	r3, #160	; 0xa0
 80012f2:	00db      	lsls	r3, r3, #3
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d10e      	bne.n	8001316 <HAL_RCC_OscConfig+0x522>
 80012f8:	4b5d      	ldr	r3, [pc, #372]	; (8001470 <HAL_RCC_OscConfig+0x67c>)
 80012fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012fc:	4b5c      	ldr	r3, [pc, #368]	; (8001470 <HAL_RCC_OscConfig+0x67c>)
 80012fe:	2180      	movs	r1, #128	; 0x80
 8001300:	00c9      	lsls	r1, r1, #3
 8001302:	430a      	orrs	r2, r1
 8001304:	651a      	str	r2, [r3, #80]	; 0x50
 8001306:	4b5a      	ldr	r3, [pc, #360]	; (8001470 <HAL_RCC_OscConfig+0x67c>)
 8001308:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800130a:	4b59      	ldr	r3, [pc, #356]	; (8001470 <HAL_RCC_OscConfig+0x67c>)
 800130c:	2180      	movs	r1, #128	; 0x80
 800130e:	0049      	lsls	r1, r1, #1
 8001310:	430a      	orrs	r2, r1
 8001312:	651a      	str	r2, [r3, #80]	; 0x50
 8001314:	e00b      	b.n	800132e <HAL_RCC_OscConfig+0x53a>
 8001316:	4b56      	ldr	r3, [pc, #344]	; (8001470 <HAL_RCC_OscConfig+0x67c>)
 8001318:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800131a:	4b55      	ldr	r3, [pc, #340]	; (8001470 <HAL_RCC_OscConfig+0x67c>)
 800131c:	4956      	ldr	r1, [pc, #344]	; (8001478 <HAL_RCC_OscConfig+0x684>)
 800131e:	400a      	ands	r2, r1
 8001320:	651a      	str	r2, [r3, #80]	; 0x50
 8001322:	4b53      	ldr	r3, [pc, #332]	; (8001470 <HAL_RCC_OscConfig+0x67c>)
 8001324:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001326:	4b52      	ldr	r3, [pc, #328]	; (8001470 <HAL_RCC_OscConfig+0x67c>)
 8001328:	4955      	ldr	r1, [pc, #340]	; (8001480 <HAL_RCC_OscConfig+0x68c>)
 800132a:	400a      	ands	r2, r1
 800132c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d015      	beq.n	8001362 <HAL_RCC_OscConfig+0x56e>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001336:	f7ff fac7 	bl	80008c8 <HAL_GetTick>
 800133a:	0003      	movs	r3, r0
 800133c:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800133e:	e009      	b.n	8001354 <HAL_RCC_OscConfig+0x560>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001340:	f7ff fac2 	bl	80008c8 <HAL_GetTick>
 8001344:	0002      	movs	r2, r0
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	4a4e      	ldr	r2, [pc, #312]	; (8001484 <HAL_RCC_OscConfig+0x690>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d901      	bls.n	8001354 <HAL_RCC_OscConfig+0x560>
        {
          return HAL_TIMEOUT;
 8001350:	2303      	movs	r3, #3
 8001352:	e11b      	b.n	800158c <HAL_RCC_OscConfig+0x798>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001354:	4b46      	ldr	r3, [pc, #280]	; (8001470 <HAL_RCC_OscConfig+0x67c>)
 8001356:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001358:	2380      	movs	r3, #128	; 0x80
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	4013      	ands	r3, r2
 800135e:	d0ef      	beq.n	8001340 <HAL_RCC_OscConfig+0x54c>
 8001360:	e014      	b.n	800138c <HAL_RCC_OscConfig+0x598>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001362:	f7ff fab1 	bl	80008c8 <HAL_GetTick>
 8001366:	0003      	movs	r3, r0
 8001368:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800136a:	e009      	b.n	8001380 <HAL_RCC_OscConfig+0x58c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800136c:	f7ff faac 	bl	80008c8 <HAL_GetTick>
 8001370:	0002      	movs	r2, r0
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	4a43      	ldr	r2, [pc, #268]	; (8001484 <HAL_RCC_OscConfig+0x690>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d901      	bls.n	8001380 <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e105      	b.n	800158c <HAL_RCC_OscConfig+0x798>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001380:	4b3b      	ldr	r3, [pc, #236]	; (8001470 <HAL_RCC_OscConfig+0x67c>)
 8001382:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001384:	2380      	movs	r3, #128	; 0x80
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	4013      	ands	r3, r2
 800138a:	d1ef      	bne.n	800136c <HAL_RCC_OscConfig+0x578>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800138c:	2323      	movs	r3, #35	; 0x23
 800138e:	18fb      	adds	r3, r7, r3
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	2b01      	cmp	r3, #1
 8001394:	d105      	bne.n	80013a2 <HAL_RCC_OscConfig+0x5ae>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001396:	4b36      	ldr	r3, [pc, #216]	; (8001470 <HAL_RCC_OscConfig+0x67c>)
 8001398:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800139a:	4b35      	ldr	r3, [pc, #212]	; (8001470 <HAL_RCC_OscConfig+0x67c>)
 800139c:	493a      	ldr	r1, [pc, #232]	; (8001488 <HAL_RCC_OscConfig+0x694>)
 800139e:	400a      	ands	r2, r1
 80013a0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2220      	movs	r2, #32
 80013a8:	4013      	ands	r3, r2
 80013aa:	d049      	beq.n	8001440 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d026      	beq.n	8001402 <HAL_RCC_OscConfig+0x60e>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80013b4:	4b2e      	ldr	r3, [pc, #184]	; (8001470 <HAL_RCC_OscConfig+0x67c>)
 80013b6:	689a      	ldr	r2, [r3, #8]
 80013b8:	4b2d      	ldr	r3, [pc, #180]	; (8001470 <HAL_RCC_OscConfig+0x67c>)
 80013ba:	2101      	movs	r1, #1
 80013bc:	430a      	orrs	r2, r1
 80013be:	609a      	str	r2, [r3, #8]
 80013c0:	4b2b      	ldr	r3, [pc, #172]	; (8001470 <HAL_RCC_OscConfig+0x67c>)
 80013c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013c4:	4b2a      	ldr	r3, [pc, #168]	; (8001470 <HAL_RCC_OscConfig+0x67c>)
 80013c6:	2101      	movs	r1, #1
 80013c8:	430a      	orrs	r2, r1
 80013ca:	635a      	str	r2, [r3, #52]	; 0x34
 80013cc:	4b2f      	ldr	r3, [pc, #188]	; (800148c <HAL_RCC_OscConfig+0x698>)
 80013ce:	6a1a      	ldr	r2, [r3, #32]
 80013d0:	4b2e      	ldr	r3, [pc, #184]	; (800148c <HAL_RCC_OscConfig+0x698>)
 80013d2:	2180      	movs	r1, #128	; 0x80
 80013d4:	0189      	lsls	r1, r1, #6
 80013d6:	430a      	orrs	r2, r1
 80013d8:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013da:	f7ff fa75 	bl	80008c8 <HAL_GetTick>
 80013de:	0003      	movs	r3, r0
 80013e0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80013e2:	e008      	b.n	80013f6 <HAL_RCC_OscConfig+0x602>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80013e4:	f7ff fa70 	bl	80008c8 <HAL_GetTick>
 80013e8:	0002      	movs	r2, r0
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d901      	bls.n	80013f6 <HAL_RCC_OscConfig+0x602>
          {
            return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e0ca      	b.n	800158c <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80013f6:	4b1e      	ldr	r3, [pc, #120]	; (8001470 <HAL_RCC_OscConfig+0x67c>)
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	2202      	movs	r2, #2
 80013fc:	4013      	ands	r3, r2
 80013fe:	d0f1      	beq.n	80013e4 <HAL_RCC_OscConfig+0x5f0>
 8001400:	e01e      	b.n	8001440 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001402:	4b1b      	ldr	r3, [pc, #108]	; (8001470 <HAL_RCC_OscConfig+0x67c>)
 8001404:	689a      	ldr	r2, [r3, #8]
 8001406:	4b1a      	ldr	r3, [pc, #104]	; (8001470 <HAL_RCC_OscConfig+0x67c>)
 8001408:	2101      	movs	r1, #1
 800140a:	438a      	bics	r2, r1
 800140c:	609a      	str	r2, [r3, #8]
 800140e:	4b1f      	ldr	r3, [pc, #124]	; (800148c <HAL_RCC_OscConfig+0x698>)
 8001410:	6a1a      	ldr	r2, [r3, #32]
 8001412:	4b1e      	ldr	r3, [pc, #120]	; (800148c <HAL_RCC_OscConfig+0x698>)
 8001414:	491e      	ldr	r1, [pc, #120]	; (8001490 <HAL_RCC_OscConfig+0x69c>)
 8001416:	400a      	ands	r2, r1
 8001418:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800141a:	f7ff fa55 	bl	80008c8 <HAL_GetTick>
 800141e:	0003      	movs	r3, r0
 8001420:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001422:	e008      	b.n	8001436 <HAL_RCC_OscConfig+0x642>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001424:	f7ff fa50 	bl	80008c8 <HAL_GetTick>
 8001428:	0002      	movs	r2, r0
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b02      	cmp	r3, #2
 8001430:	d901      	bls.n	8001436 <HAL_RCC_OscConfig+0x642>
          {
            return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e0aa      	b.n	800158c <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001436:	4b0e      	ldr	r3, [pc, #56]	; (8001470 <HAL_RCC_OscConfig+0x67c>)
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	2202      	movs	r2, #2
 800143c:	4013      	ands	r3, r2
 800143e:	d1f1      	bne.n	8001424 <HAL_RCC_OscConfig+0x630>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001444:	2b00      	cmp	r3, #0
 8001446:	d100      	bne.n	800144a <HAL_RCC_OscConfig+0x656>
 8001448:	e09f      	b.n	800158a <HAL_RCC_OscConfig+0x796>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	2b0c      	cmp	r3, #12
 800144e:	d100      	bne.n	8001452 <HAL_RCC_OscConfig+0x65e>
 8001450:	e078      	b.n	8001544 <HAL_RCC_OscConfig+0x750>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001456:	2b02      	cmp	r3, #2
 8001458:	d159      	bne.n	800150e <HAL_RCC_OscConfig+0x71a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800145a:	4b05      	ldr	r3, [pc, #20]	; (8001470 <HAL_RCC_OscConfig+0x67c>)
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	4b04      	ldr	r3, [pc, #16]	; (8001470 <HAL_RCC_OscConfig+0x67c>)
 8001460:	490c      	ldr	r1, [pc, #48]	; (8001494 <HAL_RCC_OscConfig+0x6a0>)
 8001462:	400a      	ands	r2, r1
 8001464:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001466:	f7ff fa2f 	bl	80008c8 <HAL_GetTick>
 800146a:	0003      	movs	r3, r0
 800146c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800146e:	e01c      	b.n	80014aa <HAL_RCC_OscConfig+0x6b6>
 8001470:	40021000 	.word	0x40021000
 8001474:	ffff1fff 	.word	0xffff1fff
 8001478:	fffffeff 	.word	0xfffffeff
 800147c:	40007000 	.word	0x40007000
 8001480:	fffffbff 	.word	0xfffffbff
 8001484:	00001388 	.word	0x00001388
 8001488:	efffffff 	.word	0xefffffff
 800148c:	40010000 	.word	0x40010000
 8001490:	ffffdfff 	.word	0xffffdfff
 8001494:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001498:	f7ff fa16 	bl	80008c8 <HAL_GetTick>
 800149c:	0002      	movs	r2, r0
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e070      	b.n	800158c <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80014aa:	4b3a      	ldr	r3, [pc, #232]	; (8001594 <HAL_RCC_OscConfig+0x7a0>)
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	2380      	movs	r3, #128	; 0x80
 80014b0:	049b      	lsls	r3, r3, #18
 80014b2:	4013      	ands	r3, r2
 80014b4:	d1f0      	bne.n	8001498 <HAL_RCC_OscConfig+0x6a4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014b6:	4b37      	ldr	r3, [pc, #220]	; (8001594 <HAL_RCC_OscConfig+0x7a0>)
 80014b8:	68db      	ldr	r3, [r3, #12]
 80014ba:	4a37      	ldr	r2, [pc, #220]	; (8001598 <HAL_RCC_OscConfig+0x7a4>)
 80014bc:	4013      	ands	r3, r2
 80014be:	0019      	movs	r1, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c8:	431a      	orrs	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014ce:	431a      	orrs	r2, r3
 80014d0:	4b30      	ldr	r3, [pc, #192]	; (8001594 <HAL_RCC_OscConfig+0x7a0>)
 80014d2:	430a      	orrs	r2, r1
 80014d4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014d6:	4b2f      	ldr	r3, [pc, #188]	; (8001594 <HAL_RCC_OscConfig+0x7a0>)
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	4b2e      	ldr	r3, [pc, #184]	; (8001594 <HAL_RCC_OscConfig+0x7a0>)
 80014dc:	2180      	movs	r1, #128	; 0x80
 80014de:	0449      	lsls	r1, r1, #17
 80014e0:	430a      	orrs	r2, r1
 80014e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e4:	f7ff f9f0 	bl	80008c8 <HAL_GetTick>
 80014e8:	0003      	movs	r3, r0
 80014ea:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80014ec:	e008      	b.n	8001500 <HAL_RCC_OscConfig+0x70c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014ee:	f7ff f9eb 	bl	80008c8 <HAL_GetTick>
 80014f2:	0002      	movs	r2, r0
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d901      	bls.n	8001500 <HAL_RCC_OscConfig+0x70c>
          {
            return HAL_TIMEOUT;
 80014fc:	2303      	movs	r3, #3
 80014fe:	e045      	b.n	800158c <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001500:	4b24      	ldr	r3, [pc, #144]	; (8001594 <HAL_RCC_OscConfig+0x7a0>)
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	2380      	movs	r3, #128	; 0x80
 8001506:	049b      	lsls	r3, r3, #18
 8001508:	4013      	ands	r3, r2
 800150a:	d0f0      	beq.n	80014ee <HAL_RCC_OscConfig+0x6fa>
 800150c:	e03d      	b.n	800158a <HAL_RCC_OscConfig+0x796>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800150e:	4b21      	ldr	r3, [pc, #132]	; (8001594 <HAL_RCC_OscConfig+0x7a0>)
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	4b20      	ldr	r3, [pc, #128]	; (8001594 <HAL_RCC_OscConfig+0x7a0>)
 8001514:	4921      	ldr	r1, [pc, #132]	; (800159c <HAL_RCC_OscConfig+0x7a8>)
 8001516:	400a      	ands	r2, r1
 8001518:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800151a:	f7ff f9d5 	bl	80008c8 <HAL_GetTick>
 800151e:	0003      	movs	r3, r0
 8001520:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001522:	e008      	b.n	8001536 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001524:	f7ff f9d0 	bl	80008c8 <HAL_GetTick>
 8001528:	0002      	movs	r2, r0
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	2b02      	cmp	r3, #2
 8001530:	d901      	bls.n	8001536 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e02a      	b.n	800158c <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001536:	4b17      	ldr	r3, [pc, #92]	; (8001594 <HAL_RCC_OscConfig+0x7a0>)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	2380      	movs	r3, #128	; 0x80
 800153c:	049b      	lsls	r3, r3, #18
 800153e:	4013      	ands	r3, r2
 8001540:	d1f0      	bne.n	8001524 <HAL_RCC_OscConfig+0x730>
 8001542:	e022      	b.n	800158a <HAL_RCC_OscConfig+0x796>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001548:	2b01      	cmp	r3, #1
 800154a:	d101      	bne.n	8001550 <HAL_RCC_OscConfig+0x75c>
      {
        return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e01d      	b.n	800158c <HAL_RCC_OscConfig+0x798>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001550:	4b10      	ldr	r3, [pc, #64]	; (8001594 <HAL_RCC_OscConfig+0x7a0>)
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001556:	69ba      	ldr	r2, [r7, #24]
 8001558:	2380      	movs	r3, #128	; 0x80
 800155a:	025b      	lsls	r3, r3, #9
 800155c:	401a      	ands	r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001562:	429a      	cmp	r2, r3
 8001564:	d10f      	bne.n	8001586 <HAL_RCC_OscConfig+0x792>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	23f0      	movs	r3, #240	; 0xf0
 800156a:	039b      	lsls	r3, r3, #14
 800156c:	401a      	ands	r2, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001572:	429a      	cmp	r2, r3
 8001574:	d107      	bne.n	8001586 <HAL_RCC_OscConfig+0x792>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	23c0      	movs	r3, #192	; 0xc0
 800157a:	041b      	lsls	r3, r3, #16
 800157c:	401a      	ands	r2, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001582:	429a      	cmp	r2, r3
 8001584:	d001      	beq.n	800158a <HAL_RCC_OscConfig+0x796>
        {
          return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e000      	b.n	800158c <HAL_RCC_OscConfig+0x798>
        }
      }
    }
  }
  return HAL_OK;
 800158a:	2300      	movs	r3, #0
}
 800158c:	0018      	movs	r0, r3
 800158e:	46bd      	mov	sp, r7
 8001590:	b00a      	add	sp, #40	; 0x28
 8001592:	bdb0      	pop	{r4, r5, r7, pc}
 8001594:	40021000 	.word	0x40021000
 8001598:	ff02ffff 	.word	0xff02ffff
 800159c:	feffffff 	.word	0xfeffffff

080015a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015a0:	b5b0      	push	{r4, r5, r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d101      	bne.n	80015b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e129      	b.n	8001808 <HAL_RCC_ClockConfig+0x268>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015b4:	4b96      	ldr	r3, [pc, #600]	; (8001810 <HAL_RCC_ClockConfig+0x270>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2201      	movs	r2, #1
 80015ba:	4013      	ands	r3, r2
 80015bc:	683a      	ldr	r2, [r7, #0]
 80015be:	429a      	cmp	r2, r3
 80015c0:	d91e      	bls.n	8001600 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015c2:	4b93      	ldr	r3, [pc, #588]	; (8001810 <HAL_RCC_ClockConfig+0x270>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2201      	movs	r2, #1
 80015c8:	4393      	bics	r3, r2
 80015ca:	0019      	movs	r1, r3
 80015cc:	4b90      	ldr	r3, [pc, #576]	; (8001810 <HAL_RCC_ClockConfig+0x270>)
 80015ce:	683a      	ldr	r2, [r7, #0]
 80015d0:	430a      	orrs	r2, r1
 80015d2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80015d4:	f7ff f978 	bl	80008c8 <HAL_GetTick>
 80015d8:	0003      	movs	r3, r0
 80015da:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015dc:	e009      	b.n	80015f2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015de:	f7ff f973 	bl	80008c8 <HAL_GetTick>
 80015e2:	0002      	movs	r2, r0
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	4a8a      	ldr	r2, [pc, #552]	; (8001814 <HAL_RCC_ClockConfig+0x274>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e10a      	b.n	8001808 <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015f2:	4b87      	ldr	r3, [pc, #540]	; (8001810 <HAL_RCC_ClockConfig+0x270>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2201      	movs	r2, #1
 80015f8:	4013      	ands	r3, r2
 80015fa:	683a      	ldr	r2, [r7, #0]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d1ee      	bne.n	80015de <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2202      	movs	r2, #2
 8001606:	4013      	ands	r3, r2
 8001608:	d009      	beq.n	800161e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800160a:	4b83      	ldr	r3, [pc, #524]	; (8001818 <HAL_RCC_ClockConfig+0x278>)
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	22f0      	movs	r2, #240	; 0xf0
 8001610:	4393      	bics	r3, r2
 8001612:	0019      	movs	r1, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	689a      	ldr	r2, [r3, #8]
 8001618:	4b7f      	ldr	r3, [pc, #508]	; (8001818 <HAL_RCC_ClockConfig+0x278>)
 800161a:	430a      	orrs	r2, r1
 800161c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2201      	movs	r2, #1
 8001624:	4013      	ands	r3, r2
 8001626:	d100      	bne.n	800162a <HAL_RCC_ClockConfig+0x8a>
 8001628:	e089      	b.n	800173e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	2b02      	cmp	r3, #2
 8001630:	d107      	bne.n	8001642 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001632:	4b79      	ldr	r3, [pc, #484]	; (8001818 <HAL_RCC_ClockConfig+0x278>)
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	2380      	movs	r3, #128	; 0x80
 8001638:	029b      	lsls	r3, r3, #10
 800163a:	4013      	ands	r3, r2
 800163c:	d120      	bne.n	8001680 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e0e2      	b.n	8001808 <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	2b03      	cmp	r3, #3
 8001648:	d107      	bne.n	800165a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800164a:	4b73      	ldr	r3, [pc, #460]	; (8001818 <HAL_RCC_ClockConfig+0x278>)
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	2380      	movs	r3, #128	; 0x80
 8001650:	049b      	lsls	r3, r3, #18
 8001652:	4013      	ands	r3, r2
 8001654:	d114      	bne.n	8001680 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e0d6      	b.n	8001808 <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d106      	bne.n	8001670 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001662:	4b6d      	ldr	r3, [pc, #436]	; (8001818 <HAL_RCC_ClockConfig+0x278>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2204      	movs	r2, #4
 8001668:	4013      	ands	r3, r2
 800166a:	d109      	bne.n	8001680 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e0cb      	b.n	8001808 <HAL_RCC_ClockConfig+0x268>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001670:	4b69      	ldr	r3, [pc, #420]	; (8001818 <HAL_RCC_ClockConfig+0x278>)
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	2380      	movs	r3, #128	; 0x80
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	4013      	ands	r3, r2
 800167a:	d101      	bne.n	8001680 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e0c3      	b.n	8001808 <HAL_RCC_ClockConfig+0x268>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001680:	4b65      	ldr	r3, [pc, #404]	; (8001818 <HAL_RCC_ClockConfig+0x278>)
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	2203      	movs	r2, #3
 8001686:	4393      	bics	r3, r2
 8001688:	0019      	movs	r1, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685a      	ldr	r2, [r3, #4]
 800168e:	4b62      	ldr	r3, [pc, #392]	; (8001818 <HAL_RCC_ClockConfig+0x278>)
 8001690:	430a      	orrs	r2, r1
 8001692:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001694:	f7ff f918 	bl	80008c8 <HAL_GetTick>
 8001698:	0003      	movs	r3, r0
 800169a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d111      	bne.n	80016c8 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80016a4:	e009      	b.n	80016ba <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016a6:	f7ff f90f 	bl	80008c8 <HAL_GetTick>
 80016aa:	0002      	movs	r2, r0
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	4a58      	ldr	r2, [pc, #352]	; (8001814 <HAL_RCC_ClockConfig+0x274>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e0a6      	b.n	8001808 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80016ba:	4b57      	ldr	r3, [pc, #348]	; (8001818 <HAL_RCC_ClockConfig+0x278>)
 80016bc:	68db      	ldr	r3, [r3, #12]
 80016be:	220c      	movs	r2, #12
 80016c0:	4013      	ands	r3, r2
 80016c2:	2b08      	cmp	r3, #8
 80016c4:	d1ef      	bne.n	80016a6 <HAL_RCC_ClockConfig+0x106>
 80016c6:	e03a      	b.n	800173e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	2b03      	cmp	r3, #3
 80016ce:	d111      	bne.n	80016f4 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016d0:	e009      	b.n	80016e6 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016d2:	f7ff f8f9 	bl	80008c8 <HAL_GetTick>
 80016d6:	0002      	movs	r2, r0
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	4a4d      	ldr	r2, [pc, #308]	; (8001814 <HAL_RCC_ClockConfig+0x274>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e090      	b.n	8001808 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016e6:	4b4c      	ldr	r3, [pc, #304]	; (8001818 <HAL_RCC_ClockConfig+0x278>)
 80016e8:	68db      	ldr	r3, [r3, #12]
 80016ea:	220c      	movs	r2, #12
 80016ec:	4013      	ands	r3, r2
 80016ee:	2b0c      	cmp	r3, #12
 80016f0:	d1ef      	bne.n	80016d2 <HAL_RCC_ClockConfig+0x132>
 80016f2:	e024      	b.n	800173e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d11b      	bne.n	8001734 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80016fc:	e009      	b.n	8001712 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016fe:	f7ff f8e3 	bl	80008c8 <HAL_GetTick>
 8001702:	0002      	movs	r2, r0
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	4a42      	ldr	r2, [pc, #264]	; (8001814 <HAL_RCC_ClockConfig+0x274>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d901      	bls.n	8001712 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e07a      	b.n	8001808 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001712:	4b41      	ldr	r3, [pc, #260]	; (8001818 <HAL_RCC_ClockConfig+0x278>)
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	220c      	movs	r2, #12
 8001718:	4013      	ands	r3, r2
 800171a:	2b04      	cmp	r3, #4
 800171c:	d1ef      	bne.n	80016fe <HAL_RCC_ClockConfig+0x15e>
 800171e:	e00e      	b.n	800173e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001720:	f7ff f8d2 	bl	80008c8 <HAL_GetTick>
 8001724:	0002      	movs	r2, r0
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	4a3a      	ldr	r2, [pc, #232]	; (8001814 <HAL_RCC_ClockConfig+0x274>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d901      	bls.n	8001734 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e069      	b.n	8001808 <HAL_RCC_ClockConfig+0x268>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001734:	4b38      	ldr	r3, [pc, #224]	; (8001818 <HAL_RCC_ClockConfig+0x278>)
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	220c      	movs	r2, #12
 800173a:	4013      	ands	r3, r2
 800173c:	d1f0      	bne.n	8001720 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800173e:	4b34      	ldr	r3, [pc, #208]	; (8001810 <HAL_RCC_ClockConfig+0x270>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2201      	movs	r2, #1
 8001744:	4013      	ands	r3, r2
 8001746:	683a      	ldr	r2, [r7, #0]
 8001748:	429a      	cmp	r2, r3
 800174a:	d21e      	bcs.n	800178a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800174c:	4b30      	ldr	r3, [pc, #192]	; (8001810 <HAL_RCC_ClockConfig+0x270>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2201      	movs	r2, #1
 8001752:	4393      	bics	r3, r2
 8001754:	0019      	movs	r1, r3
 8001756:	4b2e      	ldr	r3, [pc, #184]	; (8001810 <HAL_RCC_ClockConfig+0x270>)
 8001758:	683a      	ldr	r2, [r7, #0]
 800175a:	430a      	orrs	r2, r1
 800175c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800175e:	f7ff f8b3 	bl	80008c8 <HAL_GetTick>
 8001762:	0003      	movs	r3, r0
 8001764:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001766:	e009      	b.n	800177c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001768:	f7ff f8ae 	bl	80008c8 <HAL_GetTick>
 800176c:	0002      	movs	r2, r0
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	4a28      	ldr	r2, [pc, #160]	; (8001814 <HAL_RCC_ClockConfig+0x274>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d901      	bls.n	800177c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e045      	b.n	8001808 <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800177c:	4b24      	ldr	r3, [pc, #144]	; (8001810 <HAL_RCC_ClockConfig+0x270>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2201      	movs	r2, #1
 8001782:	4013      	ands	r3, r2
 8001784:	683a      	ldr	r2, [r7, #0]
 8001786:	429a      	cmp	r2, r3
 8001788:	d1ee      	bne.n	8001768 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	2204      	movs	r2, #4
 8001790:	4013      	ands	r3, r2
 8001792:	d009      	beq.n	80017a8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001794:	4b20      	ldr	r3, [pc, #128]	; (8001818 <HAL_RCC_ClockConfig+0x278>)
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	4a20      	ldr	r2, [pc, #128]	; (800181c <HAL_RCC_ClockConfig+0x27c>)
 800179a:	4013      	ands	r3, r2
 800179c:	0019      	movs	r1, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	68da      	ldr	r2, [r3, #12]
 80017a2:	4b1d      	ldr	r3, [pc, #116]	; (8001818 <HAL_RCC_ClockConfig+0x278>)
 80017a4:	430a      	orrs	r2, r1
 80017a6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2208      	movs	r2, #8
 80017ae:	4013      	ands	r3, r2
 80017b0:	d00a      	beq.n	80017c8 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017b2:	4b19      	ldr	r3, [pc, #100]	; (8001818 <HAL_RCC_ClockConfig+0x278>)
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	4a1a      	ldr	r2, [pc, #104]	; (8001820 <HAL_RCC_ClockConfig+0x280>)
 80017b8:	4013      	ands	r3, r2
 80017ba:	0019      	movs	r1, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	691b      	ldr	r3, [r3, #16]
 80017c0:	00da      	lsls	r2, r3, #3
 80017c2:	4b15      	ldr	r3, [pc, #84]	; (8001818 <HAL_RCC_ClockConfig+0x278>)
 80017c4:	430a      	orrs	r2, r1
 80017c6:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017c8:	f000 f832 	bl	8001830 <HAL_RCC_GetSysClockFreq>
 80017cc:	0001      	movs	r1, r0
 80017ce:	4b12      	ldr	r3, [pc, #72]	; (8001818 <HAL_RCC_ClockConfig+0x278>)
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	091b      	lsrs	r3, r3, #4
 80017d4:	220f      	movs	r2, #15
 80017d6:	4013      	ands	r3, r2
 80017d8:	4a12      	ldr	r2, [pc, #72]	; (8001824 <HAL_RCC_ClockConfig+0x284>)
 80017da:	5cd3      	ldrb	r3, [r2, r3]
 80017dc:	000a      	movs	r2, r1
 80017de:	40da      	lsrs	r2, r3
 80017e0:	4b11      	ldr	r3, [pc, #68]	; (8001828 <HAL_RCC_ClockConfig+0x288>)
 80017e2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80017e4:	4b11      	ldr	r3, [pc, #68]	; (800182c <HAL_RCC_ClockConfig+0x28c>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	250b      	movs	r5, #11
 80017ea:	197c      	adds	r4, r7, r5
 80017ec:	0018      	movs	r0, r3
 80017ee:	f7ff f825 	bl	800083c <HAL_InitTick>
 80017f2:	0003      	movs	r3, r0
 80017f4:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80017f6:	197b      	adds	r3, r7, r5
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d003      	beq.n	8001806 <HAL_RCC_ClockConfig+0x266>
  {
    return status;
 80017fe:	230b      	movs	r3, #11
 8001800:	18fb      	adds	r3, r7, r3
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	e000      	b.n	8001808 <HAL_RCC_ClockConfig+0x268>
  }

  return HAL_OK;
 8001806:	2300      	movs	r3, #0
}
 8001808:	0018      	movs	r0, r3
 800180a:	46bd      	mov	sp, r7
 800180c:	b004      	add	sp, #16
 800180e:	bdb0      	pop	{r4, r5, r7, pc}
 8001810:	40022000 	.word	0x40022000
 8001814:	00001388 	.word	0x00001388
 8001818:	40021000 	.word	0x40021000
 800181c:	fffff8ff 	.word	0xfffff8ff
 8001820:	ffffc7ff 	.word	0xffffc7ff
 8001824:	08002650 	.word	0x08002650
 8001828:	20000000 	.word	0x20000000
 800182c:	20000004 	.word	0x20000004

08001830 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001830:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001832:	b08f      	sub	sp, #60	; 0x3c
 8001834:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001836:	4b4a      	ldr	r3, [pc, #296]	; (8001960 <HAL_RCC_GetSysClockFreq+0x130>)
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800183c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800183e:	230c      	movs	r3, #12
 8001840:	4013      	ands	r3, r2
 8001842:	2b08      	cmp	r3, #8
 8001844:	d00f      	beq.n	8001866 <HAL_RCC_GetSysClockFreq+0x36>
 8001846:	2b0c      	cmp	r3, #12
 8001848:	d010      	beq.n	800186c <HAL_RCC_GetSysClockFreq+0x3c>
 800184a:	2b04      	cmp	r3, #4
 800184c:	d000      	beq.n	8001850 <HAL_RCC_GetSysClockFreq+0x20>
 800184e:	e073      	b.n	8001938 <HAL_RCC_GetSysClockFreq+0x108>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001850:	4b43      	ldr	r3, [pc, #268]	; (8001960 <HAL_RCC_GetSysClockFreq+0x130>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2210      	movs	r2, #16
 8001856:	4013      	ands	r3, r2
 8001858:	d002      	beq.n	8001860 <HAL_RCC_GetSysClockFreq+0x30>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800185a:	4b42      	ldr	r3, [pc, #264]	; (8001964 <HAL_RCC_GetSysClockFreq+0x134>)
 800185c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800185e:	e079      	b.n	8001954 <HAL_RCC_GetSysClockFreq+0x124>
        sysclockfreq =  HSI_VALUE;
 8001860:	4b41      	ldr	r3, [pc, #260]	; (8001968 <HAL_RCC_GetSysClockFreq+0x138>)
 8001862:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001864:	e076      	b.n	8001954 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001866:	4b41      	ldr	r3, [pc, #260]	; (800196c <HAL_RCC_GetSysClockFreq+0x13c>)
 8001868:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800186a:	e073      	b.n	8001954 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800186c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800186e:	0c9a      	lsrs	r2, r3, #18
 8001870:	230f      	movs	r3, #15
 8001872:	401a      	ands	r2, r3
 8001874:	4b3e      	ldr	r3, [pc, #248]	; (8001970 <HAL_RCC_GetSysClockFreq+0x140>)
 8001876:	5c9b      	ldrb	r3, [r3, r2]
 8001878:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800187a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800187c:	0d9a      	lsrs	r2, r3, #22
 800187e:	2303      	movs	r3, #3
 8001880:	4013      	ands	r3, r2
 8001882:	3301      	adds	r3, #1
 8001884:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001886:	4b36      	ldr	r3, [pc, #216]	; (8001960 <HAL_RCC_GetSysClockFreq+0x130>)
 8001888:	68da      	ldr	r2, [r3, #12]
 800188a:	2380      	movs	r3, #128	; 0x80
 800188c:	025b      	lsls	r3, r3, #9
 800188e:	4013      	ands	r3, r2
 8001890:	d019      	beq.n	80018c6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001894:	61bb      	str	r3, [r7, #24]
 8001896:	2300      	movs	r3, #0
 8001898:	61fb      	str	r3, [r7, #28]
 800189a:	4a34      	ldr	r2, [pc, #208]	; (800196c <HAL_RCC_GetSysClockFreq+0x13c>)
 800189c:	2300      	movs	r3, #0
 800189e:	69b8      	ldr	r0, [r7, #24]
 80018a0:	69f9      	ldr	r1, [r7, #28]
 80018a2:	f7fe fcdd 	bl	8000260 <__aeabi_lmul>
 80018a6:	0003      	movs	r3, r0
 80018a8:	000c      	movs	r4, r1
 80018aa:	0018      	movs	r0, r3
 80018ac:	0021      	movs	r1, r4
 80018ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b0:	613b      	str	r3, [r7, #16]
 80018b2:	2300      	movs	r3, #0
 80018b4:	617b      	str	r3, [r7, #20]
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	f7fe fcb1 	bl	8000220 <__aeabi_uldivmod>
 80018be:	0003      	movs	r3, r0
 80018c0:	000c      	movs	r4, r1
 80018c2:	637b      	str	r3, [r7, #52]	; 0x34
 80018c4:	e035      	b.n	8001932 <HAL_RCC_GetSysClockFreq+0x102>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80018c6:	4b26      	ldr	r3, [pc, #152]	; (8001960 <HAL_RCC_GetSysClockFreq+0x130>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2210      	movs	r2, #16
 80018cc:	4013      	ands	r3, r2
 80018ce:	d019      	beq.n	8001904 <HAL_RCC_GetSysClockFreq+0xd4>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80018d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018d2:	60bb      	str	r3, [r7, #8]
 80018d4:	2300      	movs	r3, #0
 80018d6:	60fb      	str	r3, [r7, #12]
 80018d8:	4a22      	ldr	r2, [pc, #136]	; (8001964 <HAL_RCC_GetSysClockFreq+0x134>)
 80018da:	2300      	movs	r3, #0
 80018dc:	68b8      	ldr	r0, [r7, #8]
 80018de:	68f9      	ldr	r1, [r7, #12]
 80018e0:	f7fe fcbe 	bl	8000260 <__aeabi_lmul>
 80018e4:	0003      	movs	r3, r0
 80018e6:	000c      	movs	r4, r1
 80018e8:	0018      	movs	r0, r3
 80018ea:	0021      	movs	r1, r4
 80018ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ee:	603b      	str	r3, [r7, #0]
 80018f0:	2300      	movs	r3, #0
 80018f2:	607b      	str	r3, [r7, #4]
 80018f4:	683a      	ldr	r2, [r7, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f7fe fc92 	bl	8000220 <__aeabi_uldivmod>
 80018fc:	0003      	movs	r3, r0
 80018fe:	000c      	movs	r4, r1
 8001900:	637b      	str	r3, [r7, #52]	; 0x34
 8001902:	e016      	b.n	8001932 <HAL_RCC_GetSysClockFreq+0x102>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001906:	0018      	movs	r0, r3
 8001908:	2300      	movs	r3, #0
 800190a:	0019      	movs	r1, r3
 800190c:	4a16      	ldr	r2, [pc, #88]	; (8001968 <HAL_RCC_GetSysClockFreq+0x138>)
 800190e:	2300      	movs	r3, #0
 8001910:	f7fe fca6 	bl	8000260 <__aeabi_lmul>
 8001914:	0003      	movs	r3, r0
 8001916:	000c      	movs	r4, r1
 8001918:	0018      	movs	r0, r3
 800191a:	0021      	movs	r1, r4
 800191c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191e:	001d      	movs	r5, r3
 8001920:	2300      	movs	r3, #0
 8001922:	001e      	movs	r6, r3
 8001924:	002a      	movs	r2, r5
 8001926:	0033      	movs	r3, r6
 8001928:	f7fe fc7a 	bl	8000220 <__aeabi_uldivmod>
 800192c:	0003      	movs	r3, r0
 800192e:	000c      	movs	r4, r1
 8001930:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001934:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001936:	e00d      	b.n	8001954 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001938:	4b09      	ldr	r3, [pc, #36]	; (8001960 <HAL_RCC_GetSysClockFreq+0x130>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	0b5b      	lsrs	r3, r3, #13
 800193e:	2207      	movs	r2, #7
 8001940:	4013      	ands	r3, r2
 8001942:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001944:	6a3b      	ldr	r3, [r7, #32]
 8001946:	3301      	adds	r3, #1
 8001948:	2280      	movs	r2, #128	; 0x80
 800194a:	0212      	lsls	r2, r2, #8
 800194c:	409a      	lsls	r2, r3
 800194e:	0013      	movs	r3, r2
 8001950:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001952:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001956:	0018      	movs	r0, r3
 8001958:	46bd      	mov	sp, r7
 800195a:	b00f      	add	sp, #60	; 0x3c
 800195c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800195e:	46c0      	nop			; (mov r8, r8)
 8001960:	40021000 	.word	0x40021000
 8001964:	003d0900 	.word	0x003d0900
 8001968:	00f42400 	.word	0x00f42400
 800196c:	007a1200 	.word	0x007a1200
 8001970:	08002668 	.word	0x08002668

08001974 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001978:	4b02      	ldr	r3, [pc, #8]	; (8001984 <HAL_RCC_GetHCLKFreq+0x10>)
 800197a:	681b      	ldr	r3, [r3, #0]
}
 800197c:	0018      	movs	r0, r3
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	46c0      	nop			; (mov r8, r8)
 8001984:	20000000 	.word	0x20000000

08001988 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800198c:	f7ff fff2 	bl	8001974 <HAL_RCC_GetHCLKFreq>
 8001990:	0001      	movs	r1, r0
 8001992:	4b06      	ldr	r3, [pc, #24]	; (80019ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	0a1b      	lsrs	r3, r3, #8
 8001998:	2207      	movs	r2, #7
 800199a:	4013      	ands	r3, r2
 800199c:	4a04      	ldr	r2, [pc, #16]	; (80019b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800199e:	5cd3      	ldrb	r3, [r2, r3]
 80019a0:	40d9      	lsrs	r1, r3
 80019a2:	000b      	movs	r3, r1
}
 80019a4:	0018      	movs	r0, r3
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	46c0      	nop			; (mov r8, r8)
 80019ac:	40021000 	.word	0x40021000
 80019b0:	08002660 	.word	0x08002660

080019b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019b8:	f7ff ffdc 	bl	8001974 <HAL_RCC_GetHCLKFreq>
 80019bc:	0001      	movs	r1, r0
 80019be:	4b06      	ldr	r3, [pc, #24]	; (80019d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	0adb      	lsrs	r3, r3, #11
 80019c4:	2207      	movs	r2, #7
 80019c6:	4013      	ands	r3, r2
 80019c8:	4a04      	ldr	r2, [pc, #16]	; (80019dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80019ca:	5cd3      	ldrb	r3, [r2, r3]
 80019cc:	40d9      	lsrs	r1, r3
 80019ce:	000b      	movs	r3, r1
}
 80019d0:	0018      	movs	r0, r3
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	46c0      	nop			; (mov r8, r8)
 80019d8:	40021000 	.word	0x40021000
 80019dc:	08002660 	.word	0x08002660

080019e0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b086      	sub	sp, #24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80019e8:	2317      	movs	r3, #23
 80019ea:	18fb      	adds	r3, r7, r3
 80019ec:	2200      	movs	r2, #0
 80019ee:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2220      	movs	r2, #32
 80019f6:	4013      	ands	r3, r2
 80019f8:	d106      	bne.n	8001a08 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	2380      	movs	r3, #128	; 0x80
 8001a00:	011b      	lsls	r3, r3, #4
 8001a02:	4013      	ands	r3, r2
 8001a04:	d100      	bne.n	8001a08 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8001a06:	e0d9      	b.n	8001bbc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a08:	4ba4      	ldr	r3, [pc, #656]	; (8001c9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001a0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a0c:	2380      	movs	r3, #128	; 0x80
 8001a0e:	055b      	lsls	r3, r3, #21
 8001a10:	4013      	ands	r3, r2
 8001a12:	d10a      	bne.n	8001a2a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a14:	4ba1      	ldr	r3, [pc, #644]	; (8001c9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001a16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a18:	4ba0      	ldr	r3, [pc, #640]	; (8001c9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001a1a:	2180      	movs	r1, #128	; 0x80
 8001a1c:	0549      	lsls	r1, r1, #21
 8001a1e:	430a      	orrs	r2, r1
 8001a20:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001a22:	2317      	movs	r3, #23
 8001a24:	18fb      	adds	r3, r7, r3
 8001a26:	2201      	movs	r2, #1
 8001a28:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a2a:	4b9d      	ldr	r3, [pc, #628]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	2380      	movs	r3, #128	; 0x80
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	4013      	ands	r3, r2
 8001a34:	d11a      	bne.n	8001a6c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a36:	4b9a      	ldr	r3, [pc, #616]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	4b99      	ldr	r3, [pc, #612]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001a3c:	2180      	movs	r1, #128	; 0x80
 8001a3e:	0049      	lsls	r1, r1, #1
 8001a40:	430a      	orrs	r2, r1
 8001a42:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a44:	f7fe ff40 	bl	80008c8 <HAL_GetTick>
 8001a48:	0003      	movs	r3, r0
 8001a4a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a4c:	e008      	b.n	8001a60 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a4e:	f7fe ff3b 	bl	80008c8 <HAL_GetTick>
 8001a52:	0002      	movs	r2, r0
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	2b64      	cmp	r3, #100	; 0x64
 8001a5a:	d901      	bls.n	8001a60 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e118      	b.n	8001c92 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a60:	4b8f      	ldr	r3, [pc, #572]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	2380      	movs	r3, #128	; 0x80
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	4013      	ands	r3, r2
 8001a6a:	d0f0      	beq.n	8001a4e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001a6c:	4b8b      	ldr	r3, [pc, #556]	; (8001c9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	23c0      	movs	r3, #192	; 0xc0
 8001a72:	039b      	lsls	r3, r3, #14
 8001a74:	4013      	ands	r3, r2
 8001a76:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685a      	ldr	r2, [r3, #4]
 8001a7c:	23c0      	movs	r3, #192	; 0xc0
 8001a7e:	039b      	lsls	r3, r3, #14
 8001a80:	4013      	ands	r3, r2
 8001a82:	68fa      	ldr	r2, [r7, #12]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d107      	bne.n	8001a98 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689a      	ldr	r2, [r3, #8]
 8001a8c:	23c0      	movs	r3, #192	; 0xc0
 8001a8e:	039b      	lsls	r3, r3, #14
 8001a90:	4013      	ands	r3, r2
 8001a92:	68fa      	ldr	r2, [r7, #12]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d013      	beq.n	8001ac0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685a      	ldr	r2, [r3, #4]
 8001a9c:	23c0      	movs	r3, #192	; 0xc0
 8001a9e:	029b      	lsls	r3, r3, #10
 8001aa0:	401a      	ands	r2, r3
 8001aa2:	23c0      	movs	r3, #192	; 0xc0
 8001aa4:	029b      	lsls	r3, r3, #10
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d10a      	bne.n	8001ac0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001aaa:	4b7c      	ldr	r3, [pc, #496]	; (8001c9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	2380      	movs	r3, #128	; 0x80
 8001ab0:	029b      	lsls	r3, r3, #10
 8001ab2:	401a      	ands	r2, r3
 8001ab4:	2380      	movs	r3, #128	; 0x80
 8001ab6:	029b      	lsls	r3, r3, #10
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d101      	bne.n	8001ac0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e0e8      	b.n	8001c92 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001ac0:	4b76      	ldr	r3, [pc, #472]	; (8001c9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001ac2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ac4:	23c0      	movs	r3, #192	; 0xc0
 8001ac6:	029b      	lsls	r3, r3, #10
 8001ac8:	4013      	ands	r3, r2
 8001aca:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d049      	beq.n	8001b66 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685a      	ldr	r2, [r3, #4]
 8001ad6:	23c0      	movs	r3, #192	; 0xc0
 8001ad8:	029b      	lsls	r3, r3, #10
 8001ada:	4013      	ands	r3, r2
 8001adc:	68fa      	ldr	r2, [r7, #12]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d004      	beq.n	8001aec <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2220      	movs	r2, #32
 8001ae8:	4013      	ands	r3, r2
 8001aea:	d10d      	bne.n	8001b08 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689a      	ldr	r2, [r3, #8]
 8001af0:	23c0      	movs	r3, #192	; 0xc0
 8001af2:	029b      	lsls	r3, r3, #10
 8001af4:	4013      	ands	r3, r2
 8001af6:	68fa      	ldr	r2, [r7, #12]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d034      	beq.n	8001b66 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	2380      	movs	r3, #128	; 0x80
 8001b02:	011b      	lsls	r3, r3, #4
 8001b04:	4013      	ands	r3, r2
 8001b06:	d02e      	beq.n	8001b66 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001b08:	4b64      	ldr	r3, [pc, #400]	; (8001c9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001b0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b0c:	4a65      	ldr	r2, [pc, #404]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001b0e:	4013      	ands	r3, r2
 8001b10:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b12:	4b62      	ldr	r3, [pc, #392]	; (8001c9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001b14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b16:	4b61      	ldr	r3, [pc, #388]	; (8001c9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001b18:	2180      	movs	r1, #128	; 0x80
 8001b1a:	0309      	lsls	r1, r1, #12
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b20:	4b5e      	ldr	r3, [pc, #376]	; (8001c9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001b22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b24:	4b5d      	ldr	r3, [pc, #372]	; (8001c9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001b26:	4960      	ldr	r1, [pc, #384]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8001b28:	400a      	ands	r2, r1
 8001b2a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001b2c:	4b5b      	ldr	r3, [pc, #364]	; (8001c9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001b2e:	68fa      	ldr	r2, [r7, #12]
 8001b30:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001b32:	68fa      	ldr	r2, [r7, #12]
 8001b34:	2380      	movs	r3, #128	; 0x80
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	4013      	ands	r3, r2
 8001b3a:	d014      	beq.n	8001b66 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b3c:	f7fe fec4 	bl	80008c8 <HAL_GetTick>
 8001b40:	0003      	movs	r3, r0
 8001b42:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b44:	e009      	b.n	8001b5a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b46:	f7fe febf 	bl	80008c8 <HAL_GetTick>
 8001b4a:	0002      	movs	r2, r0
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	4a56      	ldr	r2, [pc, #344]	; (8001cac <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e09b      	b.n	8001c92 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b5a:	4b50      	ldr	r3, [pc, #320]	; (8001c9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001b5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b5e:	2380      	movs	r3, #128	; 0x80
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	4013      	ands	r3, r2
 8001b64:	d0ef      	beq.n	8001b46 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685a      	ldr	r2, [r3, #4]
 8001b6a:	23c0      	movs	r3, #192	; 0xc0
 8001b6c:	029b      	lsls	r3, r3, #10
 8001b6e:	401a      	ands	r2, r3
 8001b70:	23c0      	movs	r3, #192	; 0xc0
 8001b72:	029b      	lsls	r3, r3, #10
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d10c      	bne.n	8001b92 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8001b78:	4b48      	ldr	r3, [pc, #288]	; (8001c9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a4c      	ldr	r2, [pc, #304]	; (8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8001b7e:	4013      	ands	r3, r2
 8001b80:	0019      	movs	r1, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685a      	ldr	r2, [r3, #4]
 8001b86:	23c0      	movs	r3, #192	; 0xc0
 8001b88:	039b      	lsls	r3, r3, #14
 8001b8a:	401a      	ands	r2, r3
 8001b8c:	4b43      	ldr	r3, [pc, #268]	; (8001c9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001b8e:	430a      	orrs	r2, r1
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	4b42      	ldr	r3, [pc, #264]	; (8001c9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001b94:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685a      	ldr	r2, [r3, #4]
 8001b9a:	23c0      	movs	r3, #192	; 0xc0
 8001b9c:	029b      	lsls	r3, r3, #10
 8001b9e:	401a      	ands	r2, r3
 8001ba0:	4b3e      	ldr	r3, [pc, #248]	; (8001c9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ba6:	2317      	movs	r3, #23
 8001ba8:	18fb      	adds	r3, r7, r3
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d105      	bne.n	8001bbc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bb0:	4b3a      	ldr	r3, [pc, #232]	; (8001c9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001bb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001bb4:	4b39      	ldr	r3, [pc, #228]	; (8001c9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001bb6:	493f      	ldr	r1, [pc, #252]	; (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001bb8:	400a      	ands	r2, r1
 8001bba:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	d009      	beq.n	8001bda <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001bc6:	4b35      	ldr	r3, [pc, #212]	; (8001c9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bca:	2203      	movs	r2, #3
 8001bcc:	4393      	bics	r3, r2
 8001bce:	0019      	movs	r1, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	68da      	ldr	r2, [r3, #12]
 8001bd4:	4b31      	ldr	r3, [pc, #196]	; (8001c9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001bd6:	430a      	orrs	r2, r1
 8001bd8:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2202      	movs	r2, #2
 8001be0:	4013      	ands	r3, r2
 8001be2:	d009      	beq.n	8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001be4:	4b2d      	ldr	r3, [pc, #180]	; (8001c9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001be6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be8:	220c      	movs	r2, #12
 8001bea:	4393      	bics	r3, r2
 8001bec:	0019      	movs	r1, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	691a      	ldr	r2, [r3, #16]
 8001bf2:	4b2a      	ldr	r3, [pc, #168]	; (8001c9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2204      	movs	r2, #4
 8001bfe:	4013      	ands	r3, r2
 8001c00:	d009      	beq.n	8001c16 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001c02:	4b26      	ldr	r3, [pc, #152]	; (8001c9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c06:	4a2c      	ldr	r2, [pc, #176]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8001c08:	4013      	ands	r3, r2
 8001c0a:	0019      	movs	r1, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	695a      	ldr	r2, [r3, #20]
 8001c10:	4b22      	ldr	r3, [pc, #136]	; (8001c9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001c12:	430a      	orrs	r2, r1
 8001c14:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2208      	movs	r2, #8
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	d009      	beq.n	8001c34 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001c20:	4b1e      	ldr	r3, [pc, #120]	; (8001c9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001c22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c24:	4a25      	ldr	r2, [pc, #148]	; (8001cbc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8001c26:	4013      	ands	r3, r2
 8001c28:	0019      	movs	r1, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	699a      	ldr	r2, [r3, #24]
 8001c2e:	4b1b      	ldr	r3, [pc, #108]	; (8001c9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001c30:	430a      	orrs	r2, r1
 8001c32:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	2380      	movs	r3, #128	; 0x80
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	d009      	beq.n	8001c54 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001c40:	4b16      	ldr	r3, [pc, #88]	; (8001c9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001c42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c44:	4a17      	ldr	r2, [pc, #92]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001c46:	4013      	ands	r3, r2
 8001c48:	0019      	movs	r1, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	69da      	ldr	r2, [r3, #28]
 8001c4e:	4b13      	ldr	r3, [pc, #76]	; (8001c9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001c50:	430a      	orrs	r2, r1
 8001c52:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2240      	movs	r2, #64	; 0x40
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	d009      	beq.n	8001c72 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001c5e:	4b0f      	ldr	r3, [pc, #60]	; (8001c9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c62:	4a17      	ldr	r2, [pc, #92]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8001c64:	4013      	ands	r3, r2
 8001c66:	0019      	movs	r1, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c6c:	4b0b      	ldr	r3, [pc, #44]	; (8001c9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2280      	movs	r2, #128	; 0x80
 8001c78:	4013      	ands	r3, r2
 8001c7a:	d009      	beq.n	8001c90 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001c7c:	4b07      	ldr	r3, [pc, #28]	; (8001c9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c80:	4a10      	ldr	r2, [pc, #64]	; (8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001c82:	4013      	ands	r3, r2
 8001c84:	0019      	movs	r1, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6a1a      	ldr	r2, [r3, #32]
 8001c8a:	4b04      	ldr	r3, [pc, #16]	; (8001c9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	0018      	movs	r0, r3
 8001c94:	46bd      	mov	sp, r7
 8001c96:	b006      	add	sp, #24
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	46c0      	nop			; (mov r8, r8)
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	40007000 	.word	0x40007000
 8001ca4:	fffcffff 	.word	0xfffcffff
 8001ca8:	fff7ffff 	.word	0xfff7ffff
 8001cac:	00001388 	.word	0x00001388
 8001cb0:	ffcfffff 	.word	0xffcfffff
 8001cb4:	efffffff 	.word	0xefffffff
 8001cb8:	fffff3ff 	.word	0xfffff3ff
 8001cbc:	ffffcfff 	.word	0xffffcfff
 8001cc0:	fbffffff 	.word	0xfbffffff
 8001cc4:	fff3ffff 	.word	0xfff3ffff

08001cc8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d101      	bne.n	8001cda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e044      	b.n	8001d64 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d107      	bne.n	8001cf2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2274      	movs	r2, #116	; 0x74
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	0018      	movs	r0, r3
 8001cee:	f7fe fcfb 	bl	80006e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2224      	movs	r2, #36	; 0x24
 8001cf6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2101      	movs	r1, #1
 8001d04:	438a      	bics	r2, r1
 8001d06:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	0018      	movs	r0, r3
 8001d0c:	f000 f830 	bl	8001d70 <UART_SetConfig>
 8001d10:	0003      	movs	r3, r0
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d101      	bne.n	8001d1a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e024      	b.n	8001d64 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d003      	beq.n	8001d2a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	0018      	movs	r0, r3
 8001d26:	f000 fadf 	bl	80022e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	685a      	ldr	r2, [r3, #4]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	490d      	ldr	r1, [pc, #52]	; (8001d6c <HAL_UART_Init+0xa4>)
 8001d36:	400a      	ands	r2, r1
 8001d38:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	689a      	ldr	r2, [r3, #8]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	212a      	movs	r1, #42	; 0x2a
 8001d46:	438a      	bics	r2, r1
 8001d48:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2101      	movs	r1, #1
 8001d56:	430a      	orrs	r2, r1
 8001d58:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	0018      	movs	r0, r3
 8001d5e:	f000 fb77 	bl	8002450 <UART_CheckIdleState>
 8001d62:	0003      	movs	r3, r0
}
 8001d64:	0018      	movs	r0, r3
 8001d66:	46bd      	mov	sp, r7
 8001d68:	b002      	add	sp, #8
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	ffffb7ff 	.word	0xffffb7ff

08001d70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d70:	b5b0      	push	{r4, r5, r7, lr}
 8001d72:	b08e      	sub	sp, #56	; 0x38
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001d78:	231a      	movs	r3, #26
 8001d7a:	2218      	movs	r2, #24
 8001d7c:	4694      	mov	ip, r2
 8001d7e:	44bc      	add	ip, r7
 8001d80:	4463      	add	r3, ip
 8001d82:	2200      	movs	r2, #0
 8001d84:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	689a      	ldr	r2, [r3, #8]
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	431a      	orrs	r2, r3
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	695b      	ldr	r3, [r3, #20]
 8001d94:	431a      	orrs	r2, r3
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	69db      	ldr	r3, [r3, #28]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4acb      	ldr	r2, [pc, #812]	; (80020d4 <UART_SetConfig+0x364>)
 8001da6:	4013      	ands	r3, r2
 8001da8:	0019      	movs	r1, r3
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001db0:	430a      	orrs	r2, r1
 8001db2:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	4ac7      	ldr	r2, [pc, #796]	; (80020d8 <UART_SetConfig+0x368>)
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	0019      	movs	r1, r3
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	68da      	ldr	r2, [r3, #12]
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4ac1      	ldr	r2, [pc, #772]	; (80020dc <UART_SetConfig+0x36c>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d004      	beq.n	8001de6 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	6a1b      	ldr	r3, [r3, #32]
 8001de0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001de2:	4313      	orrs	r3, r2
 8001de4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	4abc      	ldr	r2, [pc, #752]	; (80020e0 <UART_SetConfig+0x370>)
 8001dee:	4013      	ands	r3, r2
 8001df0:	0019      	movs	r1, r3
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4ab8      	ldr	r2, [pc, #736]	; (80020e4 <UART_SetConfig+0x374>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d134      	bne.n	8001e70 <UART_SetConfig+0x100>
 8001e06:	4bb8      	ldr	r3, [pc, #736]	; (80020e8 <UART_SetConfig+0x378>)
 8001e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e0a:	2203      	movs	r2, #3
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d015      	beq.n	8001e3e <UART_SetConfig+0xce>
 8001e12:	d304      	bcc.n	8001e1e <UART_SetConfig+0xae>
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d00a      	beq.n	8001e2e <UART_SetConfig+0xbe>
 8001e18:	2b03      	cmp	r3, #3
 8001e1a:	d018      	beq.n	8001e4e <UART_SetConfig+0xde>
 8001e1c:	e01f      	b.n	8001e5e <UART_SetConfig+0xee>
 8001e1e:	231b      	movs	r3, #27
 8001e20:	2218      	movs	r2, #24
 8001e22:	4694      	mov	ip, r2
 8001e24:	44bc      	add	ip, r7
 8001e26:	4463      	add	r3, ip
 8001e28:	2201      	movs	r2, #1
 8001e2a:	701a      	strb	r2, [r3, #0]
 8001e2c:	e0c5      	b.n	8001fba <UART_SetConfig+0x24a>
 8001e2e:	231b      	movs	r3, #27
 8001e30:	2218      	movs	r2, #24
 8001e32:	4694      	mov	ip, r2
 8001e34:	44bc      	add	ip, r7
 8001e36:	4463      	add	r3, ip
 8001e38:	2202      	movs	r2, #2
 8001e3a:	701a      	strb	r2, [r3, #0]
 8001e3c:	e0bd      	b.n	8001fba <UART_SetConfig+0x24a>
 8001e3e:	231b      	movs	r3, #27
 8001e40:	2218      	movs	r2, #24
 8001e42:	4694      	mov	ip, r2
 8001e44:	44bc      	add	ip, r7
 8001e46:	4463      	add	r3, ip
 8001e48:	2204      	movs	r2, #4
 8001e4a:	701a      	strb	r2, [r3, #0]
 8001e4c:	e0b5      	b.n	8001fba <UART_SetConfig+0x24a>
 8001e4e:	231b      	movs	r3, #27
 8001e50:	2218      	movs	r2, #24
 8001e52:	4694      	mov	ip, r2
 8001e54:	44bc      	add	ip, r7
 8001e56:	4463      	add	r3, ip
 8001e58:	2208      	movs	r2, #8
 8001e5a:	701a      	strb	r2, [r3, #0]
 8001e5c:	e0ad      	b.n	8001fba <UART_SetConfig+0x24a>
 8001e5e:	231b      	movs	r3, #27
 8001e60:	2218      	movs	r2, #24
 8001e62:	4694      	mov	ip, r2
 8001e64:	44bc      	add	ip, r7
 8001e66:	4463      	add	r3, ip
 8001e68:	2210      	movs	r2, #16
 8001e6a:	701a      	strb	r2, [r3, #0]
 8001e6c:	46c0      	nop			; (mov r8, r8)
 8001e6e:	e0a4      	b.n	8001fba <UART_SetConfig+0x24a>
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a9d      	ldr	r2, [pc, #628]	; (80020ec <UART_SetConfig+0x37c>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d137      	bne.n	8001eea <UART_SetConfig+0x17a>
 8001e7a:	4b9b      	ldr	r3, [pc, #620]	; (80020e8 <UART_SetConfig+0x378>)
 8001e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e7e:	220c      	movs	r2, #12
 8001e80:	4013      	ands	r3, r2
 8001e82:	2b04      	cmp	r3, #4
 8001e84:	d018      	beq.n	8001eb8 <UART_SetConfig+0x148>
 8001e86:	d802      	bhi.n	8001e8e <UART_SetConfig+0x11e>
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d005      	beq.n	8001e98 <UART_SetConfig+0x128>
 8001e8c:	e024      	b.n	8001ed8 <UART_SetConfig+0x168>
 8001e8e:	2b08      	cmp	r3, #8
 8001e90:	d00a      	beq.n	8001ea8 <UART_SetConfig+0x138>
 8001e92:	2b0c      	cmp	r3, #12
 8001e94:	d018      	beq.n	8001ec8 <UART_SetConfig+0x158>
 8001e96:	e01f      	b.n	8001ed8 <UART_SetConfig+0x168>
 8001e98:	231b      	movs	r3, #27
 8001e9a:	2218      	movs	r2, #24
 8001e9c:	4694      	mov	ip, r2
 8001e9e:	44bc      	add	ip, r7
 8001ea0:	4463      	add	r3, ip
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	701a      	strb	r2, [r3, #0]
 8001ea6:	e088      	b.n	8001fba <UART_SetConfig+0x24a>
 8001ea8:	231b      	movs	r3, #27
 8001eaa:	2218      	movs	r2, #24
 8001eac:	4694      	mov	ip, r2
 8001eae:	44bc      	add	ip, r7
 8001eb0:	4463      	add	r3, ip
 8001eb2:	2202      	movs	r2, #2
 8001eb4:	701a      	strb	r2, [r3, #0]
 8001eb6:	e080      	b.n	8001fba <UART_SetConfig+0x24a>
 8001eb8:	231b      	movs	r3, #27
 8001eba:	2218      	movs	r2, #24
 8001ebc:	4694      	mov	ip, r2
 8001ebe:	44bc      	add	ip, r7
 8001ec0:	4463      	add	r3, ip
 8001ec2:	2204      	movs	r2, #4
 8001ec4:	701a      	strb	r2, [r3, #0]
 8001ec6:	e078      	b.n	8001fba <UART_SetConfig+0x24a>
 8001ec8:	231b      	movs	r3, #27
 8001eca:	2218      	movs	r2, #24
 8001ecc:	4694      	mov	ip, r2
 8001ece:	44bc      	add	ip, r7
 8001ed0:	4463      	add	r3, ip
 8001ed2:	2208      	movs	r2, #8
 8001ed4:	701a      	strb	r2, [r3, #0]
 8001ed6:	e070      	b.n	8001fba <UART_SetConfig+0x24a>
 8001ed8:	231b      	movs	r3, #27
 8001eda:	2218      	movs	r2, #24
 8001edc:	4694      	mov	ip, r2
 8001ede:	44bc      	add	ip, r7
 8001ee0:	4463      	add	r3, ip
 8001ee2:	2210      	movs	r2, #16
 8001ee4:	701a      	strb	r2, [r3, #0]
 8001ee6:	46c0      	nop			; (mov r8, r8)
 8001ee8:	e067      	b.n	8001fba <UART_SetConfig+0x24a>
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a80      	ldr	r2, [pc, #512]	; (80020f0 <UART_SetConfig+0x380>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d107      	bne.n	8001f04 <UART_SetConfig+0x194>
 8001ef4:	231b      	movs	r3, #27
 8001ef6:	2218      	movs	r2, #24
 8001ef8:	4694      	mov	ip, r2
 8001efa:	44bc      	add	ip, r7
 8001efc:	4463      	add	r3, ip
 8001efe:	2200      	movs	r2, #0
 8001f00:	701a      	strb	r2, [r3, #0]
 8001f02:	e05a      	b.n	8001fba <UART_SetConfig+0x24a>
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a7a      	ldr	r2, [pc, #488]	; (80020f4 <UART_SetConfig+0x384>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d107      	bne.n	8001f1e <UART_SetConfig+0x1ae>
 8001f0e:	231b      	movs	r3, #27
 8001f10:	2218      	movs	r2, #24
 8001f12:	4694      	mov	ip, r2
 8001f14:	44bc      	add	ip, r7
 8001f16:	4463      	add	r3, ip
 8001f18:	2200      	movs	r2, #0
 8001f1a:	701a      	strb	r2, [r3, #0]
 8001f1c:	e04d      	b.n	8001fba <UART_SetConfig+0x24a>
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a6e      	ldr	r2, [pc, #440]	; (80020dc <UART_SetConfig+0x36c>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d141      	bne.n	8001fac <UART_SetConfig+0x23c>
 8001f28:	4b6f      	ldr	r3, [pc, #444]	; (80020e8 <UART_SetConfig+0x378>)
 8001f2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f2c:	23c0      	movs	r3, #192	; 0xc0
 8001f2e:	011b      	lsls	r3, r3, #4
 8001f30:	4013      	ands	r3, r2
 8001f32:	2280      	movs	r2, #128	; 0x80
 8001f34:	00d2      	lsls	r2, r2, #3
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d01f      	beq.n	8001f7a <UART_SetConfig+0x20a>
 8001f3a:	2280      	movs	r2, #128	; 0x80
 8001f3c:	00d2      	lsls	r2, r2, #3
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d802      	bhi.n	8001f48 <UART_SetConfig+0x1d8>
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d009      	beq.n	8001f5a <UART_SetConfig+0x1ea>
 8001f46:	e028      	b.n	8001f9a <UART_SetConfig+0x22a>
 8001f48:	2280      	movs	r2, #128	; 0x80
 8001f4a:	0112      	lsls	r2, r2, #4
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d00c      	beq.n	8001f6a <UART_SetConfig+0x1fa>
 8001f50:	22c0      	movs	r2, #192	; 0xc0
 8001f52:	0112      	lsls	r2, r2, #4
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d018      	beq.n	8001f8a <UART_SetConfig+0x21a>
 8001f58:	e01f      	b.n	8001f9a <UART_SetConfig+0x22a>
 8001f5a:	231b      	movs	r3, #27
 8001f5c:	2218      	movs	r2, #24
 8001f5e:	4694      	mov	ip, r2
 8001f60:	44bc      	add	ip, r7
 8001f62:	4463      	add	r3, ip
 8001f64:	2200      	movs	r2, #0
 8001f66:	701a      	strb	r2, [r3, #0]
 8001f68:	e027      	b.n	8001fba <UART_SetConfig+0x24a>
 8001f6a:	231b      	movs	r3, #27
 8001f6c:	2218      	movs	r2, #24
 8001f6e:	4694      	mov	ip, r2
 8001f70:	44bc      	add	ip, r7
 8001f72:	4463      	add	r3, ip
 8001f74:	2202      	movs	r2, #2
 8001f76:	701a      	strb	r2, [r3, #0]
 8001f78:	e01f      	b.n	8001fba <UART_SetConfig+0x24a>
 8001f7a:	231b      	movs	r3, #27
 8001f7c:	2218      	movs	r2, #24
 8001f7e:	4694      	mov	ip, r2
 8001f80:	44bc      	add	ip, r7
 8001f82:	4463      	add	r3, ip
 8001f84:	2204      	movs	r2, #4
 8001f86:	701a      	strb	r2, [r3, #0]
 8001f88:	e017      	b.n	8001fba <UART_SetConfig+0x24a>
 8001f8a:	231b      	movs	r3, #27
 8001f8c:	2218      	movs	r2, #24
 8001f8e:	4694      	mov	ip, r2
 8001f90:	44bc      	add	ip, r7
 8001f92:	4463      	add	r3, ip
 8001f94:	2208      	movs	r2, #8
 8001f96:	701a      	strb	r2, [r3, #0]
 8001f98:	e00f      	b.n	8001fba <UART_SetConfig+0x24a>
 8001f9a:	231b      	movs	r3, #27
 8001f9c:	2218      	movs	r2, #24
 8001f9e:	4694      	mov	ip, r2
 8001fa0:	44bc      	add	ip, r7
 8001fa2:	4463      	add	r3, ip
 8001fa4:	2210      	movs	r2, #16
 8001fa6:	701a      	strb	r2, [r3, #0]
 8001fa8:	46c0      	nop			; (mov r8, r8)
 8001faa:	e006      	b.n	8001fba <UART_SetConfig+0x24a>
 8001fac:	231b      	movs	r3, #27
 8001fae:	2218      	movs	r2, #24
 8001fb0:	4694      	mov	ip, r2
 8001fb2:	44bc      	add	ip, r7
 8001fb4:	4463      	add	r3, ip
 8001fb6:	2210      	movs	r2, #16
 8001fb8:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a47      	ldr	r2, [pc, #284]	; (80020dc <UART_SetConfig+0x36c>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d000      	beq.n	8001fc6 <UART_SetConfig+0x256>
 8001fc4:	e0a0      	b.n	8002108 <UART_SetConfig+0x398>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8001fc6:	231b      	movs	r3, #27
 8001fc8:	2218      	movs	r2, #24
 8001fca:	4694      	mov	ip, r2
 8001fcc:	44bc      	add	ip, r7
 8001fce:	4463      	add	r3, ip
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d00d      	beq.n	8001ff2 <UART_SetConfig+0x282>
 8001fd6:	dc02      	bgt.n	8001fde <UART_SetConfig+0x26e>
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d005      	beq.n	8001fe8 <UART_SetConfig+0x278>
 8001fdc:	e01d      	b.n	800201a <UART_SetConfig+0x2aa>
 8001fde:	2b04      	cmp	r3, #4
 8001fe0:	d012      	beq.n	8002008 <UART_SetConfig+0x298>
 8001fe2:	2b08      	cmp	r3, #8
 8001fe4:	d015      	beq.n	8002012 <UART_SetConfig+0x2a2>
 8001fe6:	e018      	b.n	800201a <UART_SetConfig+0x2aa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001fe8:	f7ff fcce 	bl	8001988 <HAL_RCC_GetPCLK1Freq>
 8001fec:	0003      	movs	r3, r0
 8001fee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8001ff0:	e01d      	b.n	800202e <UART_SetConfig+0x2be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001ff2:	4b3d      	ldr	r3, [pc, #244]	; (80020e8 <UART_SetConfig+0x378>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2210      	movs	r2, #16
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	d002      	beq.n	8002002 <UART_SetConfig+0x292>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8001ffc:	4b3e      	ldr	r3, [pc, #248]	; (80020f8 <UART_SetConfig+0x388>)
 8001ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002000:	e015      	b.n	800202e <UART_SetConfig+0x2be>
          pclk = (uint32_t) HSI_VALUE;
 8002002:	4b3e      	ldr	r3, [pc, #248]	; (80020fc <UART_SetConfig+0x38c>)
 8002004:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002006:	e012      	b.n	800202e <UART_SetConfig+0x2be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002008:	f7ff fc12 	bl	8001830 <HAL_RCC_GetSysClockFreq>
 800200c:	0003      	movs	r3, r0
 800200e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002010:	e00d      	b.n	800202e <UART_SetConfig+0x2be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002012:	2380      	movs	r3, #128	; 0x80
 8002014:	021b      	lsls	r3, r3, #8
 8002016:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002018:	e009      	b.n	800202e <UART_SetConfig+0x2be>
      default:
        pclk = 0U;
 800201a:	2300      	movs	r3, #0
 800201c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800201e:	231a      	movs	r3, #26
 8002020:	2218      	movs	r2, #24
 8002022:	4694      	mov	ip, r2
 8002024:	44bc      	add	ip, r7
 8002026:	4463      	add	r3, ip
 8002028:	2201      	movs	r2, #1
 800202a:	701a      	strb	r2, [r3, #0]
        break;
 800202c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800202e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002030:	2b00      	cmp	r3, #0
 8002032:	d100      	bne.n	8002036 <UART_SetConfig+0x2c6>
 8002034:	e13c      	b.n	80022b0 <UART_SetConfig+0x540>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	685a      	ldr	r2, [r3, #4]
 800203a:	0013      	movs	r3, r2
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	189b      	adds	r3, r3, r2
 8002040:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002042:	429a      	cmp	r2, r3
 8002044:	d305      	bcc.n	8002052 <UART_SetConfig+0x2e2>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800204c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800204e:	429a      	cmp	r2, r3
 8002050:	d907      	bls.n	8002062 <UART_SetConfig+0x2f2>
      {
        ret = HAL_ERROR;
 8002052:	231a      	movs	r3, #26
 8002054:	2218      	movs	r2, #24
 8002056:	4694      	mov	ip, r2
 8002058:	44bc      	add	ip, r7
 800205a:	4463      	add	r3, ip
 800205c:	2201      	movs	r2, #1
 800205e:	701a      	strb	r2, [r3, #0]
 8002060:	e126      	b.n	80022b0 <UART_SetConfig+0x540>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002064:	613b      	str	r3, [r7, #16]
 8002066:	2300      	movs	r3, #0
 8002068:	617b      	str	r3, [r7, #20]
 800206a:	6939      	ldr	r1, [r7, #16]
 800206c:	697a      	ldr	r2, [r7, #20]
 800206e:	000b      	movs	r3, r1
 8002070:	0e1b      	lsrs	r3, r3, #24
 8002072:	0010      	movs	r0, r2
 8002074:	0205      	lsls	r5, r0, #8
 8002076:	431d      	orrs	r5, r3
 8002078:	000b      	movs	r3, r1
 800207a:	021c      	lsls	r4, r3, #8
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	085b      	lsrs	r3, r3, #1
 8002082:	60bb      	str	r3, [r7, #8]
 8002084:	2300      	movs	r3, #0
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	68b8      	ldr	r0, [r7, #8]
 800208a:	68f9      	ldr	r1, [r7, #12]
 800208c:	1900      	adds	r0, r0, r4
 800208e:	4169      	adcs	r1, r5
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	603b      	str	r3, [r7, #0]
 8002096:	2300      	movs	r3, #0
 8002098:	607b      	str	r3, [r7, #4]
 800209a:	683a      	ldr	r2, [r7, #0]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f7fe f8bf 	bl	8000220 <__aeabi_uldivmod>
 80020a2:	0003      	movs	r3, r0
 80020a4:	000c      	movs	r4, r1
 80020a6:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80020a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020aa:	4a15      	ldr	r2, [pc, #84]	; (8002100 <UART_SetConfig+0x390>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d908      	bls.n	80020c2 <UART_SetConfig+0x352>
 80020b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020b2:	4a14      	ldr	r2, [pc, #80]	; (8002104 <UART_SetConfig+0x394>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d804      	bhi.n	80020c2 <UART_SetConfig+0x352>
        {
          huart->Instance->BRR = usartdiv;
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80020be:	60da      	str	r2, [r3, #12]
 80020c0:	e0f6      	b.n	80022b0 <UART_SetConfig+0x540>
        }
        else
        {
          ret = HAL_ERROR;
 80020c2:	231a      	movs	r3, #26
 80020c4:	2218      	movs	r2, #24
 80020c6:	4694      	mov	ip, r2
 80020c8:	44bc      	add	ip, r7
 80020ca:	4463      	add	r3, ip
 80020cc:	2201      	movs	r2, #1
 80020ce:	701a      	strb	r2, [r3, #0]
 80020d0:	e0ee      	b.n	80022b0 <UART_SetConfig+0x540>
 80020d2:	46c0      	nop			; (mov r8, r8)
 80020d4:	efff69f3 	.word	0xefff69f3
 80020d8:	ffffcfff 	.word	0xffffcfff
 80020dc:	40004800 	.word	0x40004800
 80020e0:	fffff4ff 	.word	0xfffff4ff
 80020e4:	40013800 	.word	0x40013800
 80020e8:	40021000 	.word	0x40021000
 80020ec:	40004400 	.word	0x40004400
 80020f0:	40004c00 	.word	0x40004c00
 80020f4:	40005000 	.word	0x40005000
 80020f8:	003d0900 	.word	0x003d0900
 80020fc:	00f42400 	.word	0x00f42400
 8002100:	000002ff 	.word	0x000002ff
 8002104:	000fffff 	.word	0x000fffff
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	69da      	ldr	r2, [r3, #28]
 800210c:	2380      	movs	r3, #128	; 0x80
 800210e:	021b      	lsls	r3, r3, #8
 8002110:	429a      	cmp	r2, r3
 8002112:	d000      	beq.n	8002116 <UART_SetConfig+0x3a6>
 8002114:	e073      	b.n	80021fe <UART_SetConfig+0x48e>
  {
    switch (clocksource)
 8002116:	231b      	movs	r3, #27
 8002118:	2218      	movs	r2, #24
 800211a:	4694      	mov	ip, r2
 800211c:	44bc      	add	ip, r7
 800211e:	4463      	add	r3, ip
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	2b08      	cmp	r3, #8
 8002124:	d822      	bhi.n	800216c <UART_SetConfig+0x3fc>
 8002126:	009a      	lsls	r2, r3, #2
 8002128:	4b69      	ldr	r3, [pc, #420]	; (80022d0 <UART_SetConfig+0x560>)
 800212a:	18d3      	adds	r3, r2, r3
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002130:	f7ff fc2a 	bl	8001988 <HAL_RCC_GetPCLK1Freq>
 8002134:	0003      	movs	r3, r0
 8002136:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002138:	e022      	b.n	8002180 <UART_SetConfig+0x410>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800213a:	f7ff fc3b 	bl	80019b4 <HAL_RCC_GetPCLK2Freq>
 800213e:	0003      	movs	r3, r0
 8002140:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002142:	e01d      	b.n	8002180 <UART_SetConfig+0x410>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002144:	4b63      	ldr	r3, [pc, #396]	; (80022d4 <UART_SetConfig+0x564>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2210      	movs	r2, #16
 800214a:	4013      	ands	r3, r2
 800214c:	d002      	beq.n	8002154 <UART_SetConfig+0x3e4>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800214e:	4b62      	ldr	r3, [pc, #392]	; (80022d8 <UART_SetConfig+0x568>)
 8002150:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002152:	e015      	b.n	8002180 <UART_SetConfig+0x410>
          pclk = (uint32_t) HSI_VALUE;
 8002154:	4b61      	ldr	r3, [pc, #388]	; (80022dc <UART_SetConfig+0x56c>)
 8002156:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002158:	e012      	b.n	8002180 <UART_SetConfig+0x410>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800215a:	f7ff fb69 	bl	8001830 <HAL_RCC_GetSysClockFreq>
 800215e:	0003      	movs	r3, r0
 8002160:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002162:	e00d      	b.n	8002180 <UART_SetConfig+0x410>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002164:	2380      	movs	r3, #128	; 0x80
 8002166:	021b      	lsls	r3, r3, #8
 8002168:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800216a:	e009      	b.n	8002180 <UART_SetConfig+0x410>
      default:
        pclk = 0U;
 800216c:	2300      	movs	r3, #0
 800216e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002170:	231a      	movs	r3, #26
 8002172:	2218      	movs	r2, #24
 8002174:	4694      	mov	ip, r2
 8002176:	44bc      	add	ip, r7
 8002178:	4463      	add	r3, ip
 800217a:	2201      	movs	r2, #1
 800217c:	701a      	strb	r2, [r3, #0]
        break;
 800217e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002182:	2b00      	cmp	r3, #0
 8002184:	d100      	bne.n	8002188 <UART_SetConfig+0x418>
 8002186:	e093      	b.n	80022b0 <UART_SetConfig+0x540>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800218a:	005a      	lsls	r2, r3, #1
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	085b      	lsrs	r3, r3, #1
 8002192:	18d2      	adds	r2, r2, r3
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	0019      	movs	r1, r3
 800219a:	0010      	movs	r0, r2
 800219c:	f7fd ffb4 	bl	8000108 <__udivsi3>
 80021a0:	0003      	movs	r3, r0
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80021a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021a8:	2b0f      	cmp	r3, #15
 80021aa:	d920      	bls.n	80021ee <UART_SetConfig+0x47e>
 80021ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ae:	4a4c      	ldr	r2, [pc, #304]	; (80022e0 <UART_SetConfig+0x570>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d81c      	bhi.n	80021ee <UART_SetConfig+0x47e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80021b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021b6:	b29a      	uxth	r2, r3
 80021b8:	200e      	movs	r0, #14
 80021ba:	2418      	movs	r4, #24
 80021bc:	193b      	adds	r3, r7, r4
 80021be:	181b      	adds	r3, r3, r0
 80021c0:	210f      	movs	r1, #15
 80021c2:	438a      	bics	r2, r1
 80021c4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80021c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021c8:	085b      	lsrs	r3, r3, #1
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	2207      	movs	r2, #7
 80021ce:	4013      	ands	r3, r2
 80021d0:	b299      	uxth	r1, r3
 80021d2:	193b      	adds	r3, r7, r4
 80021d4:	181b      	adds	r3, r3, r0
 80021d6:	193a      	adds	r2, r7, r4
 80021d8:	1812      	adds	r2, r2, r0
 80021da:	8812      	ldrh	r2, [r2, #0]
 80021dc:	430a      	orrs	r2, r1
 80021de:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	193a      	adds	r2, r7, r4
 80021e6:	1812      	adds	r2, r2, r0
 80021e8:	8812      	ldrh	r2, [r2, #0]
 80021ea:	60da      	str	r2, [r3, #12]
 80021ec:	e060      	b.n	80022b0 <UART_SetConfig+0x540>
      }
      else
      {
        ret = HAL_ERROR;
 80021ee:	231a      	movs	r3, #26
 80021f0:	2218      	movs	r2, #24
 80021f2:	4694      	mov	ip, r2
 80021f4:	44bc      	add	ip, r7
 80021f6:	4463      	add	r3, ip
 80021f8:	2201      	movs	r2, #1
 80021fa:	701a      	strb	r2, [r3, #0]
 80021fc:	e058      	b.n	80022b0 <UART_SetConfig+0x540>
      }
    }
  }
  else
  {
    switch (clocksource)
 80021fe:	231b      	movs	r3, #27
 8002200:	2218      	movs	r2, #24
 8002202:	4694      	mov	ip, r2
 8002204:	44bc      	add	ip, r7
 8002206:	4463      	add	r3, ip
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	2b08      	cmp	r3, #8
 800220c:	d822      	bhi.n	8002254 <UART_SetConfig+0x4e4>
 800220e:	009a      	lsls	r2, r3, #2
 8002210:	4b34      	ldr	r3, [pc, #208]	; (80022e4 <UART_SetConfig+0x574>)
 8002212:	18d3      	adds	r3, r2, r3
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002218:	f7ff fbb6 	bl	8001988 <HAL_RCC_GetPCLK1Freq>
 800221c:	0003      	movs	r3, r0
 800221e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002220:	e022      	b.n	8002268 <UART_SetConfig+0x4f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002222:	f7ff fbc7 	bl	80019b4 <HAL_RCC_GetPCLK2Freq>
 8002226:	0003      	movs	r3, r0
 8002228:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800222a:	e01d      	b.n	8002268 <UART_SetConfig+0x4f8>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800222c:	4b29      	ldr	r3, [pc, #164]	; (80022d4 <UART_SetConfig+0x564>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2210      	movs	r2, #16
 8002232:	4013      	ands	r3, r2
 8002234:	d002      	beq.n	800223c <UART_SetConfig+0x4cc>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002236:	4b28      	ldr	r3, [pc, #160]	; (80022d8 <UART_SetConfig+0x568>)
 8002238:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800223a:	e015      	b.n	8002268 <UART_SetConfig+0x4f8>
          pclk = (uint32_t) HSI_VALUE;
 800223c:	4b27      	ldr	r3, [pc, #156]	; (80022dc <UART_SetConfig+0x56c>)
 800223e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002240:	e012      	b.n	8002268 <UART_SetConfig+0x4f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002242:	f7ff faf5 	bl	8001830 <HAL_RCC_GetSysClockFreq>
 8002246:	0003      	movs	r3, r0
 8002248:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800224a:	e00d      	b.n	8002268 <UART_SetConfig+0x4f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800224c:	2380      	movs	r3, #128	; 0x80
 800224e:	021b      	lsls	r3, r3, #8
 8002250:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002252:	e009      	b.n	8002268 <UART_SetConfig+0x4f8>
      default:
        pclk = 0U;
 8002254:	2300      	movs	r3, #0
 8002256:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002258:	231a      	movs	r3, #26
 800225a:	2218      	movs	r2, #24
 800225c:	4694      	mov	ip, r2
 800225e:	44bc      	add	ip, r7
 8002260:	4463      	add	r3, ip
 8002262:	2201      	movs	r2, #1
 8002264:	701a      	strb	r2, [r3, #0]
        break;
 8002266:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800226a:	2b00      	cmp	r3, #0
 800226c:	d020      	beq.n	80022b0 <UART_SetConfig+0x540>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	085a      	lsrs	r2, r3, #1
 8002274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002276:	18d2      	adds	r2, r2, r3
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	0019      	movs	r1, r3
 800227e:	0010      	movs	r0, r2
 8002280:	f7fd ff42 	bl	8000108 <__udivsi3>
 8002284:	0003      	movs	r3, r0
 8002286:	b29b      	uxth	r3, r3
 8002288:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800228a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800228c:	2b0f      	cmp	r3, #15
 800228e:	d908      	bls.n	80022a2 <UART_SetConfig+0x532>
 8002290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002292:	4a13      	ldr	r2, [pc, #76]	; (80022e0 <UART_SetConfig+0x570>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d804      	bhi.n	80022a2 <UART_SetConfig+0x532>
      {
        huart->Instance->BRR = usartdiv;
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800229e:	60da      	str	r2, [r3, #12]
 80022a0:	e006      	b.n	80022b0 <UART_SetConfig+0x540>
      }
      else
      {
        ret = HAL_ERROR;
 80022a2:	231a      	movs	r3, #26
 80022a4:	2218      	movs	r2, #24
 80022a6:	4694      	mov	ip, r2
 80022a8:	44bc      	add	ip, r7
 80022aa:	4463      	add	r3, ip
 80022ac:	2201      	movs	r2, #1
 80022ae:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	2200      	movs	r2, #0
 80022b4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	2200      	movs	r2, #0
 80022ba:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80022bc:	231a      	movs	r3, #26
 80022be:	2218      	movs	r2, #24
 80022c0:	4694      	mov	ip, r2
 80022c2:	44bc      	add	ip, r7
 80022c4:	4463      	add	r3, ip
 80022c6:	781b      	ldrb	r3, [r3, #0]
}
 80022c8:	0018      	movs	r0, r3
 80022ca:	46bd      	mov	sp, r7
 80022cc:	b00e      	add	sp, #56	; 0x38
 80022ce:	bdb0      	pop	{r4, r5, r7, pc}
 80022d0:	08002674 	.word	0x08002674
 80022d4:	40021000 	.word	0x40021000
 80022d8:	003d0900 	.word	0x003d0900
 80022dc:	00f42400 	.word	0x00f42400
 80022e0:	0000ffff 	.word	0x0000ffff
 80022e4:	08002698 	.word	0x08002698

080022e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f4:	2201      	movs	r2, #1
 80022f6:	4013      	ands	r3, r2
 80022f8:	d00b      	beq.n	8002312 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	4a4a      	ldr	r2, [pc, #296]	; (800242c <UART_AdvFeatureConfig+0x144>)
 8002302:	4013      	ands	r3, r2
 8002304:	0019      	movs	r1, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	430a      	orrs	r2, r1
 8002310:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002316:	2202      	movs	r2, #2
 8002318:	4013      	ands	r3, r2
 800231a:	d00b      	beq.n	8002334 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	4a43      	ldr	r2, [pc, #268]	; (8002430 <UART_AdvFeatureConfig+0x148>)
 8002324:	4013      	ands	r3, r2
 8002326:	0019      	movs	r1, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	430a      	orrs	r2, r1
 8002332:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002338:	2204      	movs	r2, #4
 800233a:	4013      	ands	r3, r2
 800233c:	d00b      	beq.n	8002356 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	4a3b      	ldr	r2, [pc, #236]	; (8002434 <UART_AdvFeatureConfig+0x14c>)
 8002346:	4013      	ands	r3, r2
 8002348:	0019      	movs	r1, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	430a      	orrs	r2, r1
 8002354:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235a:	2208      	movs	r2, #8
 800235c:	4013      	ands	r3, r2
 800235e:	d00b      	beq.n	8002378 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	4a34      	ldr	r2, [pc, #208]	; (8002438 <UART_AdvFeatureConfig+0x150>)
 8002368:	4013      	ands	r3, r2
 800236a:	0019      	movs	r1, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	430a      	orrs	r2, r1
 8002376:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237c:	2210      	movs	r2, #16
 800237e:	4013      	ands	r3, r2
 8002380:	d00b      	beq.n	800239a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	4a2c      	ldr	r2, [pc, #176]	; (800243c <UART_AdvFeatureConfig+0x154>)
 800238a:	4013      	ands	r3, r2
 800238c:	0019      	movs	r1, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	430a      	orrs	r2, r1
 8002398:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239e:	2220      	movs	r2, #32
 80023a0:	4013      	ands	r3, r2
 80023a2:	d00b      	beq.n	80023bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	4a25      	ldr	r2, [pc, #148]	; (8002440 <UART_AdvFeatureConfig+0x158>)
 80023ac:	4013      	ands	r3, r2
 80023ae:	0019      	movs	r1, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	430a      	orrs	r2, r1
 80023ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c0:	2240      	movs	r2, #64	; 0x40
 80023c2:	4013      	ands	r3, r2
 80023c4:	d01d      	beq.n	8002402 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	4a1d      	ldr	r2, [pc, #116]	; (8002444 <UART_AdvFeatureConfig+0x15c>)
 80023ce:	4013      	ands	r3, r2
 80023d0:	0019      	movs	r1, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	430a      	orrs	r2, r1
 80023dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023e2:	2380      	movs	r3, #128	; 0x80
 80023e4:	035b      	lsls	r3, r3, #13
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d10b      	bne.n	8002402 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	4a15      	ldr	r2, [pc, #84]	; (8002448 <UART_AdvFeatureConfig+0x160>)
 80023f2:	4013      	ands	r3, r2
 80023f4:	0019      	movs	r1, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	430a      	orrs	r2, r1
 8002400:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002406:	2280      	movs	r2, #128	; 0x80
 8002408:	4013      	ands	r3, r2
 800240a:	d00b      	beq.n	8002424 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	4a0e      	ldr	r2, [pc, #56]	; (800244c <UART_AdvFeatureConfig+0x164>)
 8002414:	4013      	ands	r3, r2
 8002416:	0019      	movs	r1, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	430a      	orrs	r2, r1
 8002422:	605a      	str	r2, [r3, #4]
  }
}
 8002424:	46c0      	nop			; (mov r8, r8)
 8002426:	46bd      	mov	sp, r7
 8002428:	b002      	add	sp, #8
 800242a:	bd80      	pop	{r7, pc}
 800242c:	fffdffff 	.word	0xfffdffff
 8002430:	fffeffff 	.word	0xfffeffff
 8002434:	fffbffff 	.word	0xfffbffff
 8002438:	ffff7fff 	.word	0xffff7fff
 800243c:	ffffefff 	.word	0xffffefff
 8002440:	ffffdfff 	.word	0xffffdfff
 8002444:	ffefffff 	.word	0xffefffff
 8002448:	ff9fffff 	.word	0xff9fffff
 800244c:	fff7ffff 	.word	0xfff7ffff

08002450 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b086      	sub	sp, #24
 8002454:	af02      	add	r7, sp, #8
 8002456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2280      	movs	r2, #128	; 0x80
 800245c:	2100      	movs	r1, #0
 800245e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002460:	f7fe fa32 	bl	80008c8 <HAL_GetTick>
 8002464:	0003      	movs	r3, r0
 8002466:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2208      	movs	r2, #8
 8002470:	4013      	ands	r3, r2
 8002472:	2b08      	cmp	r3, #8
 8002474:	d10d      	bne.n	8002492 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	2380      	movs	r3, #128	; 0x80
 800247a:	0399      	lsls	r1, r3, #14
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	4b18      	ldr	r3, [pc, #96]	; (80024e0 <UART_CheckIdleState+0x90>)
 8002480:	9300      	str	r3, [sp, #0]
 8002482:	0013      	movs	r3, r2
 8002484:	2200      	movs	r2, #0
 8002486:	f000 f82d 	bl	80024e4 <UART_WaitOnFlagUntilTimeout>
 800248a:	1e03      	subs	r3, r0, #0
 800248c:	d001      	beq.n	8002492 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e022      	b.n	80024d8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2204      	movs	r2, #4
 800249a:	4013      	ands	r3, r2
 800249c:	2b04      	cmp	r3, #4
 800249e:	d10d      	bne.n	80024bc <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80024a0:	68fa      	ldr	r2, [r7, #12]
 80024a2:	2380      	movs	r3, #128	; 0x80
 80024a4:	03d9      	lsls	r1, r3, #15
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	4b0d      	ldr	r3, [pc, #52]	; (80024e0 <UART_CheckIdleState+0x90>)
 80024aa:	9300      	str	r3, [sp, #0]
 80024ac:	0013      	movs	r3, r2
 80024ae:	2200      	movs	r2, #0
 80024b0:	f000 f818 	bl	80024e4 <UART_WaitOnFlagUntilTimeout>
 80024b4:	1e03      	subs	r3, r0, #0
 80024b6:	d001      	beq.n	80024bc <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e00d      	b.n	80024d8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2220      	movs	r2, #32
 80024c0:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2220      	movs	r2, #32
 80024c6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2274      	movs	r2, #116	; 0x74
 80024d2:	2100      	movs	r1, #0
 80024d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80024d6:	2300      	movs	r3, #0
}
 80024d8:	0018      	movs	r0, r3
 80024da:	46bd      	mov	sp, r7
 80024dc:	b004      	add	sp, #16
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	01ffffff 	.word	0x01ffffff

080024e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	603b      	str	r3, [r7, #0]
 80024f0:	1dfb      	adds	r3, r7, #7
 80024f2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024f4:	e05e      	b.n	80025b4 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	3301      	adds	r3, #1
 80024fa:	d05b      	beq.n	80025b4 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024fc:	f7fe f9e4 	bl	80008c8 <HAL_GetTick>
 8002500:	0002      	movs	r2, r0
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	429a      	cmp	r2, r3
 800250a:	d302      	bcc.n	8002512 <UART_WaitOnFlagUntilTimeout+0x2e>
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d11b      	bne.n	800254a <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	492f      	ldr	r1, [pc, #188]	; (80025dc <UART_WaitOnFlagUntilTimeout+0xf8>)
 800251e:	400a      	ands	r2, r1
 8002520:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	689a      	ldr	r2, [r3, #8]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2101      	movs	r1, #1
 800252e:	438a      	bics	r2, r1
 8002530:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2220      	movs	r2, #32
 8002536:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2220      	movs	r2, #32
 800253c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2274      	movs	r2, #116	; 0x74
 8002542:	2100      	movs	r1, #0
 8002544:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e044      	b.n	80025d4 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2204      	movs	r2, #4
 8002552:	4013      	ands	r3, r2
 8002554:	d02e      	beq.n	80025b4 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	69da      	ldr	r2, [r3, #28]
 800255c:	2380      	movs	r3, #128	; 0x80
 800255e:	011b      	lsls	r3, r3, #4
 8002560:	401a      	ands	r2, r3
 8002562:	2380      	movs	r3, #128	; 0x80
 8002564:	011b      	lsls	r3, r3, #4
 8002566:	429a      	cmp	r2, r3
 8002568:	d124      	bne.n	80025b4 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2280      	movs	r2, #128	; 0x80
 8002570:	0112      	lsls	r2, r2, #4
 8002572:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4917      	ldr	r1, [pc, #92]	; (80025dc <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002580:	400a      	ands	r2, r1
 8002582:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	689a      	ldr	r2, [r3, #8]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2101      	movs	r1, #1
 8002590:	438a      	bics	r2, r1
 8002592:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2220      	movs	r2, #32
 8002598:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2220      	movs	r2, #32
 800259e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2280      	movs	r2, #128	; 0x80
 80025a4:	2120      	movs	r1, #32
 80025a6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2274      	movs	r2, #116	; 0x74
 80025ac:	2100      	movs	r1, #0
 80025ae:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e00f      	b.n	80025d4 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	69db      	ldr	r3, [r3, #28]
 80025ba:	68ba      	ldr	r2, [r7, #8]
 80025bc:	4013      	ands	r3, r2
 80025be:	68ba      	ldr	r2, [r7, #8]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	425a      	negs	r2, r3
 80025c4:	4153      	adcs	r3, r2
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	001a      	movs	r2, r3
 80025ca:	1dfb      	adds	r3, r7, #7
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d091      	beq.n	80024f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80025d2:	2300      	movs	r3, #0
}
 80025d4:	0018      	movs	r0, r3
 80025d6:	46bd      	mov	sp, r7
 80025d8:	b004      	add	sp, #16
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	fffffe5f 	.word	0xfffffe5f

080025e0 <__libc_init_array>:
 80025e0:	b570      	push	{r4, r5, r6, lr}
 80025e2:	2600      	movs	r6, #0
 80025e4:	4d0c      	ldr	r5, [pc, #48]	; (8002618 <__libc_init_array+0x38>)
 80025e6:	4c0d      	ldr	r4, [pc, #52]	; (800261c <__libc_init_array+0x3c>)
 80025e8:	1b64      	subs	r4, r4, r5
 80025ea:	10a4      	asrs	r4, r4, #2
 80025ec:	42a6      	cmp	r6, r4
 80025ee:	d109      	bne.n	8002604 <__libc_init_array+0x24>
 80025f0:	2600      	movs	r6, #0
 80025f2:	f000 f821 	bl	8002638 <_init>
 80025f6:	4d0a      	ldr	r5, [pc, #40]	; (8002620 <__libc_init_array+0x40>)
 80025f8:	4c0a      	ldr	r4, [pc, #40]	; (8002624 <__libc_init_array+0x44>)
 80025fa:	1b64      	subs	r4, r4, r5
 80025fc:	10a4      	asrs	r4, r4, #2
 80025fe:	42a6      	cmp	r6, r4
 8002600:	d105      	bne.n	800260e <__libc_init_array+0x2e>
 8002602:	bd70      	pop	{r4, r5, r6, pc}
 8002604:	00b3      	lsls	r3, r6, #2
 8002606:	58eb      	ldr	r3, [r5, r3]
 8002608:	4798      	blx	r3
 800260a:	3601      	adds	r6, #1
 800260c:	e7ee      	b.n	80025ec <__libc_init_array+0xc>
 800260e:	00b3      	lsls	r3, r6, #2
 8002610:	58eb      	ldr	r3, [r5, r3]
 8002612:	4798      	blx	r3
 8002614:	3601      	adds	r6, #1
 8002616:	e7f2      	b.n	80025fe <__libc_init_array+0x1e>
 8002618:	080026c4 	.word	0x080026c4
 800261c:	080026c4 	.word	0x080026c4
 8002620:	080026c4 	.word	0x080026c4
 8002624:	080026c8 	.word	0x080026c8

08002628 <memset>:
 8002628:	0003      	movs	r3, r0
 800262a:	1812      	adds	r2, r2, r0
 800262c:	4293      	cmp	r3, r2
 800262e:	d100      	bne.n	8002632 <memset+0xa>
 8002630:	4770      	bx	lr
 8002632:	7019      	strb	r1, [r3, #0]
 8002634:	3301      	adds	r3, #1
 8002636:	e7f9      	b.n	800262c <memset+0x4>

08002638 <_init>:
 8002638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800263a:	46c0      	nop			; (mov r8, r8)
 800263c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800263e:	bc08      	pop	{r3}
 8002640:	469e      	mov	lr, r3
 8002642:	4770      	bx	lr

08002644 <_fini>:
 8002644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002646:	46c0      	nop			; (mov r8, r8)
 8002648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800264a:	bc08      	pop	{r3}
 800264c:	469e      	mov	lr, r3
 800264e:	4770      	bx	lr
